var searchIndex = {};
searchIndex['substudy'] = {"items":[[0,"","substudy","Tools for studying foreign languages using subtitles.  All APIs are\ncurrently experimental or unstable, but if you'd like me to stabilize\nthings, please get in touch.",null,null],[0,"err","","Error-handling for this library.",null,null],[4,"SubStudyError","substudy::err","Our library's error class.  This may grow new enumeration values.",null,null],[13,"Io","","Error reading or writing subtitle data.",0,null],[13,"EncodingDetector","","Error detecting the subtitle encoding.",0,null],[13,"Decode","","Error decoding the subtiles to UTF-8.",0,null],[13,"Parse","","An error which occurred while parsing subtitle data.",0,null],[6,"SubStudyResult","","Our library's result type.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"substudyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"substudyerror"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"substudyerror"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"substudyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"substudyerror"},{"name":"ioerror"}],"output":{"name":"substudyerror"}}],[11,"from","","",0,{"inputs":[{"name":"substudyerror"},{"name":"encodingdetectorerror"}],"output":{"name":"substudyerror"}}],[0,"decode","substudy","Decode text in a wide variety of character encodings.",null,null],[5,"smart_decode","substudy::decode","Guess the encoding of a byte buffer and decode it to a string.",null,null],[0,"srt","substudy","SRT-format subtitle support.",null,null],[3,"ParseError","substudy::srt","",null,null],[12,"line","","",1,null],[12,"column","","",1,null],[12,"offset","","",1,null],[12,"expected","","",1,null],[3,"Subtitle","","A single SRT-format subtitle, minus some of the optional fields used in\nvarious versions of the file format.",null,null],[12,"index","","The index of this subtitle.  We should normalize these to start\nwith 1 on output.",2,null],[12,"begin","","The start time of this subtitle, in seconds.",2,null],[12,"end","","The end time of this subtitle, in seconds.",2,null],[12,"lines","","The lines of text in this subtitle.",2,null],[3,"SubtitleFile","","The contents of an SRT-format subtitle file.",null,null],[12,"subtitles","","The subtitles in this file.",3,null],[5,"format_time","","Format seconds using the standard SRT time format.",null,{"inputs":[{"name":"f32"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"clone","","",2,{"inputs":[{"name":"subtitle"}],"output":{"name":"subtitle"}}],[11,"eq","","",2,{"inputs":[{"name":"subtitle"},{"name":"subtitle"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"subtitle"},{"name":"subtitle"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"subtitle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","Return a string representation of this subtitle.",2,{"inputs":[{"name":"subtitle"}],"output":{"name":"string"}}],[11,"eq","","",3,{"inputs":[{"name":"subtitlefile"},{"name":"subtitlefile"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"subtitlefile"},{"name":"subtitlefile"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"subtitlefile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parse raw subtitle text into an appropriate structure.",3,{"inputs":[{"name":"subtitlefile"},{"name":"str"}],"output":{"name":"substudyresult"}}],[11,"from_path","","Parse the subtitle file found at the specified path.",3,{"inputs":[{"name":"subtitlefile"},{"name":"path"}],"output":{"name":"substudyresult"}}],[11,"to_string","","Convert subtitles to a string.",3,{"inputs":[{"name":"subtitlefile"}],"output":{"name":"string"}}],[0,"clean","substudy","Tools for cleaning up subtitle files and getting them into some\nkind of normalized format.",null,null],[5,"clean_subtitle_file","substudy::clean","Clean up various issues with subtitle files, including:",null,{"inputs":[{"name":"subtitlefile"}],"output":{"name":"subtitlefile"}}],[0,"merge","substudy","Tools for merge multiple subtitles into one.",null,null],[5,"merge_subtitles","substudy::merge","Merge several subtitles into a single subtitle.  Returns `None` if no\nsubtitles have been supplied, or if the resulting subtitle has no text.",null,null],[0,"align","substudy","Align two subtitle files.",null,null],[5,"align_files","substudy::align","Align two subtitle files, merging subtitles as necessary.",null,{"inputs":[{"name":"subtitlefile"},{"name":"subtitlefile"}],"output":{"name":"vec"}}],[5,"combine_files","","Combine two subtitle files into an aligned file.",null,{"inputs":[{"name":"subtitlefile"},{"name":"subtitlefile"}],"output":{"name":"subtitlefile"}}]],"paths":[[4,"SubStudyError"],[3,"ParseError"],[3,"Subtitle"],[3,"SubtitleFile"]]};
searchIndex['docopt_macros'] = {"items":[[0,"","docopt_macros","This crate defines the `docopt!` macro. It is documented in the\ndocumentation of the `docopt` crate.",null,null],[5,"plugin_registrar","","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex['regex_macros'] = {"items":[[0,"","regex_macros","This crate provides the `regex!` macro. Its use is documented in the\n`regex` crate.",null,null]],"paths":[]};
searchIndex['peg_syntax_ext'] = {"items":[[0,"","peg_syntax_ext","",null,null],[5,"plugin_registrar","","",null,{"inputs":[{"name":"registry"}],"output":null}],[11,"new","syntax::ast","Construct an identifier with the given name and an empty context:",0,{"inputs":[{"name":"ident"},{"name":"name"}],"output":{"name":"ident"}}],[11,"as_str","","",0,{"inputs":[{"name":"ident"}],"output":{"name":"str"}}],[11,"new","syntax::util::interner","",1,{"inputs":[{"name":"interner"}],"output":{"name":"interner"}}],[11,"prefill","","",1,null],[11,"intern","","",1,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"gensym","","",1,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"get","","",1,{"inputs":[{"name":"interner"},{"name":"name"}],"output":{"name":"t"}}],[11,"len","","",1,{"inputs":[{"name":"interner"}],"output":{"name":"usize"}}],[11,"find","","",1,{"inputs":[{"name":"interner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",1,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"rcstr"}],"output":{"name":"rcstr"}}],[11,"new","","",2,{"inputs":[{"name":"rcstr"},{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",2,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",2,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"new","","",3,{"inputs":[{"name":"strinterner"}],"output":{"name":"strinterner"}}],[11,"prefill","","",3,null],[11,"intern","","",3,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym","","",3,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",3,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"name"}}],[11,"get","","",3,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"rcstr"}}],[11,"len","","",3,{"inputs":[{"name":"strinterner"}],"output":{"name":"usize"}}],[11,"find","","",3,{"inputs":[{"name":"strinterner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",3,null],[11,"reset","","",3,null],[11,"from_iter","syntax::util::small_vector","",4,{"inputs":[{"name":"smallvector"},{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",4,null],[11,"zero","","",4,{"inputs":[{"name":"smallvector"}],"output":{"name":"smallvector"}}],[11,"one","","",4,{"inputs":[{"name":"smallvector"},{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",4,{"inputs":[{"name":"smallvector"},{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",4,null],[11,"pop","","",4,{"inputs":[{"name":"smallvector"}],"output":{"name":"option"}}],[11,"push","","",4,null],[11,"push_all","","",4,null],[11,"get","","",4,{"inputs":[{"name":"smallvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"expect_one","","",4,{"inputs":[{"name":"smallvector"},{"name":"str"}],"output":{"name":"t"}}],[11,"move_iter","","Deprecated: use `into_iter`.",4,{"inputs":[{"name":"smallvector"}],"output":{"name":"intoiter"}}],[11,"into_iter","","",4,{"inputs":[{"name":"smallvector"}],"output":{"name":"intoiter"}}],[11,"len","","",4,{"inputs":[{"name":"smallvector"}],"output":{"name":"usize"}}],[11,"is_empty","","",4,{"inputs":[{"name":"smallvector"}],"output":{"name":"bool"}}],[11,"next","","",5,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"move_map","","",4,{"inputs":[{"name":"smallvector"},{"name":"f"}],"output":{"name":"smallvector"}}],[11,"clone","syntax::diagnostics::registry","",6,{"inputs":[{"name":"registry"}],"output":{"name":"registry"}}],[11,"new","","",6,null],[11,"find_description","","",6,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"encode","syntax::diagnostics::metadata","",7,{"inputs":[{"name":"errormetadata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"errormetadata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"errorlocation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"errorlocation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"from_span","","Create an error location from a span.",8,{"inputs":[{"name":"errorlocation"},{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[11,"clone","syntax::ext::base","",9,{"inputs":[{"name":"annotatable"}],"output":{"name":"annotatable"}}],[11,"fmt","","",9,{"inputs":[{"name":"annotatable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"attrs","","",9,null],[11,"fold_attrs","","",9,{"inputs":[{"name":"annotatable"},{"name":"vec"}],"output":{"name":"annotatable"}}],[11,"expect_item","","",9,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"map_item_or","","",9,{"inputs":[{"name":"annotatable"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",9,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"expect_impl_item","","",9,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"default","","",10,{"inputs":[{"name":"maceager"}],"output":{"name":"maceager"}}],[11,"expr","","",10,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",10,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",10,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",10,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",10,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"make_expr","","",10,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_items","","",10,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_impl_items","","",10,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_stmts","","",10,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_pat","","",10,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"dummyresult"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",11,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",11,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",11,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",11,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"pat"}}],[11,"make_expr","","",11,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_pat","","",11,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_items","","",11,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_impl_items","","",11,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_stmts","","",11,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"new","","",12,{"inputs":[{"name":"blockinfo"}],"output":{"name":"blockinfo"}}],[11,"new","","",13,{"inputs":[{"name":"extctxt"},{"name":"parsesess"},{"name":"vec"},{"name":"expansionconfig"}],"output":{"name":"extctxt"}}],[11,"expand_expr","","",13,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in a AST node.",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",13,null],[11,"codemap","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"parsesess"}}],[11,"cfg","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"call_site","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"backtrace","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"expnid"}}],[11,"original_span","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"original_span_in_file","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"mod_push","","",13,null],[11,"mod_pop","","",13,null],[11,"mod_path","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"bt_push","","",13,null],[11,"bt_pop","","",13,null],[11,"insert_macro","","",13,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",13,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",13,null],[11,"span_warn","","",13,null],[11,"span_unimpl","","",13,null],[11,"span_bug","","",13,null],[11,"span_note","","",13,null],[11,"span_help","","",13,null],[11,"fileline_help","","",13,null],[11,"bug","","",13,null],[11,"trace_macros","","",13,{"inputs":[{"name":"extctxt"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",13,null],[11,"ident_of","","",13,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"ident"}}],[11,"ident_of_std","","",13,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"ident"}}],[11,"name_of","","",13,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"name"}}],[11,"push_frame","","",14,null],[11,"pop_frame","","",14,null],[11,"find","","",14,{"inputs":[{"name":"syntaxenv"},{"name":"name"}],"output":{"name":"option"}}],[11,"insert","","",14,null],[11,"info","","",14,{"inputs":[{"name":"syntaxenv"}],"output":{"name":"blockinfo"}}],[11,"path","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",13,null],[11,"qpath_all","","Constructs a qualified path.",13,null],[11,"ty_mt","","",13,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ty_"}],"output":{"name":"p"}}],[11,"ty_path","","",13,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_sum","","",13,{"inputs":[{"name":"extctxt"},{"name":"path"},{"name":"ownedslice"}],"output":{"name":"p"}}],[11,"ty_ident","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",13,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_field_imm","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"typefield"}}],[11,"ty_infer","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"ownedslice"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"ty_vars","","",13,{"inputs":[{"name":"extctxt"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"ty_vars_global","","",13,{"inputs":[{"name":"extctxt"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"trait_ref","","",13,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",13,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",13,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let_typed","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"stmt_item","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_expr","","",13,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_all","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"expr_path","","",13,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"binop_"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",13,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"expr_usize","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_cast","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"pat_"}],"output":{"name":"p"}}],[11,"pat_wild","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_enum","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_expr","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_0","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_1","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",13,{"inputs":[{"name":"extctxt"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"item_"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"spanned"}}],[11,"item_enum_poly","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"structdef"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"structdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"spanned"}}],[11,"meta_word","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"meta_list","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[11,"meta_name_value","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"item_use","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",13,null],[11,"item_use_glob","","",13,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"clone","syntax::ext::deriving::partial_ord","",15,{"inputs":[{"name":"orderingop"}],"output":{"name":"orderingop"}}],[11,"eq","syntax::ext::deriving::generic::ty","",16,{"inputs":[{"name":"ptrty"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"ptrty"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"ptrty"}],"output":{"name":"ptrty"}}],[11,"eq","","",17,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"new","","",17,{"inputs":[{"name":"path"},{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",17,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",17,{"inputs":[{"name":"path"},{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",17,{"inputs":[{"name":"path"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",17,{"inputs":[{"name":"path"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"eq","","",18,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"to_ty","","",18,{"inputs":[{"name":"ty"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",18,{"inputs":[{"name":"ty"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",19,{"inputs":[{"name":"lifetimebounds"}],"output":{"name":"lifetimebounds"}}],[11,"empty","","",19,{"inputs":[{"name":"lifetimebounds"}],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",19,{"inputs":[{"name":"lifetimebounds"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"expand","syntax::ext::deriving::generic","",20,null],[11,"eq","","",21,{"inputs":[{"name":"structtype"},{"name":"structtype"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"structtype"},{"name":"structtype"}],"output":{"name":"bool"}}],[11,"clone","syntax::ext::expand","",22,{"inputs":[{"name":"patidentfinder"}],"output":{"name":"patidentfinder"}}],[11,"visit_pat","","",22,null],[11,"fold_ident","","",23,{"inputs":[{"name":"identrenamer"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",23,{"inputs":[{"name":"identrenamer"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"fold_pat","","",24,{"inputs":[{"name":"patidentrenamer"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",24,{"inputs":[{"name":"patidentrenamer"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"new","","",25,{"inputs":[{"name":"macroexpander"},{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_expr","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_item","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_underscore","","",25,{"inputs":[{"name":"macroexpander"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_stmt","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_block","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_arm","","",25,{"inputs":[{"name":"macroexpander"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_trait_item","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",25,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"new_span","","",25,{"inputs":[{"name":"macroexpander"},{"name":"span"}],"output":{"name":"span"}}],[11,"default","","",26,{"inputs":[{"name":"expansionconfig"},{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_asm","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",26,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"fold_ident","","",27,{"inputs":[{"name":"marker"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",27,{"inputs":[{"name":"marker"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"visit_mac","","",28,null],[11,"eq","syntax::ext::format","",29,{"inputs":[{"name":"argumenttype"},{"name":"argumenttype"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"argumenttype"},{"name":"argumenttype"}],"output":{"name":"bool"}}],[11,"clone","syntax::ext::mtwt","",30,{"inputs":[{"name":"syntaxcontext_"}],"output":{"name":"syntaxcontext_"}}],[11,"fmt","","",30,{"inputs":[{"name":"syntaxcontext_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"syntaxcontext_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"syntaxcontext_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"to_tokens","syntax::ast","",31,{"inputs":[{"name":"tokentree"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","collections::vec","",32,{"inputs":[{"name":"vec"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",33,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","core::option","",34,{"inputs":[{"name":"option"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",0,{"inputs":[{"name":"ident"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"path"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",36,{"inputs":[{"name":"ty"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",37,{"inputs":[{"name":"block"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",38,{"inputs":[{"name":"generics"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"whereclause"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",41,{"inputs":[{"name":"arm"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",40,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",33,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",33,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",13,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",13,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_expr","","",13,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",13,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"vec"}}],[11,"clone","syntax::ext::tt::transcribe","",42,{"inputs":[{"name":"ttframe"}],"output":{"name":"ttframe"}}],[11,"clone","","",43,{"inputs":[{"name":"ttreader"}],"output":{"name":"ttreader"}}],[11,"clone","","",44,{"inputs":[{"name":"lockstepitersize"}],"output":{"name":"lockstepitersize"}}],[11,"add","","",44,{"inputs":[{"name":"lockstepitersize"},{"name":"lockstepitersize"}],"output":{"name":"lockstepitersize"}}],[11,"clone","syntax::ext::tt::macro_parser","",45,{"inputs":[{"name":"tokentreeortokentreevec"}],"output":{"name":"tokentreeortokentreevec"}}],[11,"clone","","",46,{"inputs":[{"name":"matcherttframe"}],"output":{"name":"matcherttframe"}}],[11,"clone","","",47,{"inputs":[{"name":"matcherpos"}],"output":{"name":"matcherpos"}}],[11,"make_expr","syntax::ext::tt::macro_rules","",48,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_pat","","",48,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_items","","",48,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_impl_items","","",48,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_stmts","","",48,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"expand","","",49,null],[11,"hash","syntax::parse::parser","",50,null],[11,"cmp","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",50,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",50,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",50,null],[11,"remove","","Removes the specified flags in-place.",50,null],[11,"toggle","","Toggles the specified flags in-place.",50,null],[11,"bitor","","Returns the union of the two sets of flags.",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",50,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",50,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",51,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"pathparsingmode"}],"output":{"name":"pathparsingmode"}}],[11,"eq","","",52,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"boundparsingmode"}],"output":{"name":"boundparsingmode"}}],[11,"clone","","",53,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"eq","","",53,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"new","","",54,{"inputs":[{"name":"parser"},{"name":"parsesess"},{"name":"vec"},{"name":"box"}],"output":{"name":"parser"}}],[11,"parse_expr","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_item","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"parse_pat","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_arm","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[11,"parse_ty","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_stmt","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"token_to_string","","Convert a token to a string using self's reader",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",54,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[11,"unexpected_last","","",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"fatalerror"}}],[11,"unexpected","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"fatalerror"}}],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",54,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",54,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",54,null],[11,"commit_expr_expecting","","",54,{"inputs":[{"name":"parser"},{"name":"expr"},{"name":"token"}],"output":{"name":"result"}}],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",54,null],[11,"commit_stmt_expecting","","",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_ident","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ident_or_self_type","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_list_item","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_keyword","","",54,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",54,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"eat_keyword_noexpect","","",54,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",54,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",54,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_no_suffix","","",54,null],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_gt_or_return","","",54,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",54,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_gt","","",54,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_gt_or_return","","",54,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",54,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",54,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",54,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",54,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq","","",54,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"bump","","Advance the parser by one token",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"replace_token","","EFFECT: replace the current token and span with the given one",54,null],[11,"buffer_length","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"isize"}}],[11,"look_ahead","","",54,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",54,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal","","",54,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_help","","",54,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_note","","",54,null],[11,"span_help","","",54,null],[11,"span_suggestion","","",54,null],[11,"fileline_help","","",54,null],[11,"bug","","",54,null],[11,"warn","","",54,null],[11,"span_warn","","",54,null],[11,"span_err","","",54,null],[11,"span_bug","","",54,null],[11,"abort_if_errors","","",54,null],[11,"id_to_interned_str","","",54,{"inputs":[{"name":"parser"},{"name":"ident"}],"output":{"name":"internedstring"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",54,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_path","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",54,{"inputs":[{"name":"parser"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_unsafety","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_mt","","Parse a possibly mutable type",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_nopanic","","Parse a type.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_borrowed_pointee","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ptr","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"is_named_argument","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",54,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"parse_arg","","Parse a single function argument",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"maybe_parse_fixed_length_of_vec","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_qualified_path","","",54,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"result"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",54,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"result"}}],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",54,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_field","","Parse ident COLON expr",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"mk_expr","","",54,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"mk_unary","","",54,{"inputs":[{"name":"parser"},{"name":"unop"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_binary","","",54,{"inputs":[{"name":"parser"},{"name":"spanned"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_call","","",54,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"vec"}],"output":{"name":"expr_"}}],[11,"mk_index","","",54,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_range","","",54,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"option"}],"output":{"name":"expr_"}}],[11,"mk_field","","",54,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_tup_field","","",54,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_assign_op","","",54,{"inputs":[{"name":"parser"},{"name":"spanned"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_mac_expr","","",54,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",54,{"inputs":[{"name":"parser"},{"name":"u32"}],"output":{"name":"p"}}],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block_expr","","Parse a block or unsafe block",54,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"blockcheckmode"}],"output":{"name":"result"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_dot_or_call_expr_with","","",54,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[11,"check_unknown_macro_variable","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_token_tree","","parse a single token tree from the input.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_all_token_trees","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_prefix_expr","","Parse a prefix-operator expr",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_binops","","Parse an expression of binops",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_more_binops","","Parse an expression of binops of at least min_prec precedence",54,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"usize"}],"output":{"name":"result"}}],[11,"parse_assign_expr","","Parse an assignment expression....\nactually, this seems to be the main entry point for\nparsing an arbitrary expression.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_assign_expr_with","","",54,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lambda_expr","","",54,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"parse_else_expr","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",54,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",54,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",54,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_loop_expr","","",54,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_arm_nopanic","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_expr_nopanic","","Parse an expression",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",54,{"inputs":[{"name":"parser"},{"name":"restrictions"}],"output":{"name":"result"}}],[11,"parse_pat_nopanic","","Parse a pattern.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_stmt_nopanic","","Parse a statement. may include decl.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",54,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",54,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to\nand including the `fn` keyword:",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_impl_item","","Parse an impl item.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_record_struct_body","","",54,{"inputs":[{"name":"parser"},{"name":"ident"}],"output":{"name":"result"}}],[11,"parse_tuple_struct_body","","",54,{"inputs":[{"name":"parser"},{"name":"ident"},{"name":"generics"}],"output":{"name":"result"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",54,{"inputs":[{"name":"parser"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_item_nopanic","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_optional_str","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_str","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"eq","syntax::parse::lexer::comments","",55,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"commentstyle"}],"output":{"name":"commentstyle"}}],[11,"clone","","",56,{"inputs":[{"name":"comment"}],"output":{"name":"comment"}}],[11,"clone","","",57,{"inputs":[{"name":"literal"}],"output":{"name":"literal"}}],[11,"fmt","syntax::parse::lexer","",58,{"inputs":[{"name":"tokenandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"tokenandspan"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","","",59,{"inputs":[{"name":"stringreader"}],"output":{"name":"bool"}}],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",59,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",59,null],[11,"err","","",59,null],[11,"peek","","",59,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","syntax::ext::tt::transcribe","",43,{"inputs":[{"name":"ttreader"}],"output":{"name":"bool"}}],[11,"next_token","","",43,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",43,null],[11,"err","","",43,null],[11,"peek","","",43,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","syntax::parse::lexer","For comments.rs, which hackily pokes into pos and curr",59,{"inputs":[{"name":"stringreader"},{"name":"spanhandler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",59,{"inputs":[{"name":"stringreader"},{"name":"spanhandler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",59,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",59,null],[11,"err_span","","Report a lexical error with a given span.",59,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",59,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",59,{"inputs":[{"name":"stringreader"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",59,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",59,null],[11,"nextch","","",59,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextch_is","","",59,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",59,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",59,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fmt","syntax::parse::token","",60,{"inputs":[{"name":"binoptoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"decode","","",60,{"inputs":[{"name":"binoptoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"binoptoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"binoptoken"}],"output":{"name":"binoptoken"}}],[11,"fmt","","",61,{"inputs":[{"name":"delimtoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"decode","","",61,{"inputs":[{"name":"delimtoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"delimtoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"delimtoken"}],"output":{"name":"delimtoken"}}],[11,"fmt","","",62,{"inputs":[{"name":"identstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"decode","","",62,{"inputs":[{"name":"identstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"identstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"identstyle"}],"output":{"name":"identstyle"}}],[11,"fmt","","",63,{"inputs":[{"name":"specialmacrovar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"decode","","",63,{"inputs":[{"name":"specialmacrovar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,{"inputs":[{"name":"specialmacrovar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"specialmacrovar"}}],[11,"as_str","","",63,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"decode","","",64,{"inputs":[{"name":"lit"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"lit"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"short_name","","",64,{"inputs":[{"name":"lit"}],"output":{"name":"str"}}],[11,"fmt","","",65,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"decode","","",65,{"inputs":[{"name":"token"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,{"inputs":[{"name":"token"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"to_binop","","Maps a token to its corresponding binary operator.",65,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",65,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_keyword_allow_following_colon","","",65,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",65,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"mtwt_eq","","Hygienic identifier equality comparison.",65,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"decode","","",66,{"inputs":[{"name":"nonterminal"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"nonterminal"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fmt","","",66,{"inputs":[{"name":"nonterminal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","syntax::parse::token::keywords","",67,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"keyword"}],"output":{"name":"keyword"}}],[11,"to_name","","",67,{"inputs":[{"name":"keyword"}],"output":{"name":"name"}}],[11,"cmp","syntax::parse::token","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"internedstring"}],"output":{"name":"internedstring"}}],[11,"new","","",68,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"internedstring"}}],[11,"deref","","",68,{"inputs":[{"name":"internedstring"}],"output":{"name":"str"}}],[11,"fmt","","",68,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"decode","","",68,{"inputs":[{"name":"internedstring"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"internedstring"},{"name":"s"}],"output":{"name":"result"}}],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",54,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",54,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"spanned"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",54,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",54,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_meta_seq","","matches meta_seq = ( COMMASEP(meta_item) )",54,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[11,"parse_optional_meta","","",54,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[11,"hash","syntax::parse::obsolete","",69,null],[11,"eq","","",69,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"obsoletesyntax"}],"output":{"name":"obsoletesyntax"}}],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",54,null],[11,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",54,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"obsoletesyntax"}],"output":{"name":"p"}}],[11,"report","","",54,null],[11,"is_obsolete_ident","","",54,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eat_obsolete_ident","","",54,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"bool"}}],[11,"new","syntax::parse","",70,{"inputs":[{"name":"parsesess"}],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",70,{"inputs":[{"name":"parsesess"},{"name":"spanhandler"}],"output":{"name":"parsesess"}}],[11,"codemap","","",70,{"inputs":[{"name":"parsesess"}],"output":{"name":"codemap"}}],[11,"cmp","syntax::ast","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"ident"}],"output":{"name":"ident"}}],[11,"fmt","","",0,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"decode","","",71,{"inputs":[{"name":"name"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"name"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"partial_cmp","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"as_str","","",71,{"inputs":[{"name":"name"}],"output":{"name":"str"}}],[11,"usize","","",71,{"inputs":[{"name":"name"}],"output":{"name":"usize"}}],[11,"ident","","",71,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"encode","","",0,{"inputs":[{"name":"ident"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"ident"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"lifetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"lifetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"lifetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fmt","","",73,{"inputs":[{"name":"lifetimedef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"lifetimedef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,{"inputs":[{"name":"lifetimedef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fmt","","",35,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"path"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"path"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"fmt","","",74,{"inputs":[{"name":"pathsegment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"pathsegment"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,{"inputs":[{"name":"pathsegment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fmt","","",75,{"inputs":[{"name":"pathparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"pathparameters"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,{"inputs":[{"name":"pathparameters"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"none","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"is_empty","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_lifetimes","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_types","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"lifetimes","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"bindings","","",75,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"fmt","","",76,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fmt","","",77,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fmt","","",78,{"inputs":[{"name":"defid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"defid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"defid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"defid"},{"name":"defid"}],"output":{"name":"ordering"}}],[11,"clone","","",78,{"inputs":[{"name":"defid"}],"output":{"name":"defid"}}],[11,"local_id","","Read the node id, asserting that this def-id is krate-local.",78,{"inputs":[{"name":"defid"}],"output":{"name":"u32"}}],[11,"fmt","","",79,{"inputs":[{"name":"typarambound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"typarambound"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,{"inputs":[{"name":"typarambound"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fmt","","",80,{"inputs":[{"name":"traitboundmodifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"traitboundmodifier"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,{"inputs":[{"name":"traitboundmodifier"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",81,{"inputs":[{"name":"typaram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"typaram"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,{"inputs":[{"name":"typaram"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fmt","","",38,{"inputs":[{"name":"generics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"generics"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"generics"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"generics"}],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",38,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",38,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",38,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"whereclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"whereclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"whereclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fmt","","",82,{"inputs":[{"name":"wherepredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"wherepredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,{"inputs":[{"name":"wherepredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",83,{"inputs":[{"name":"whereboundpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"whereboundpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,{"inputs":[{"name":"whereboundpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"whereboundpredicate"}],"output":{"name":"whereboundpredicate"}}],[11,"fmt","","",84,{"inputs":[{"name":"whereregionpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"whereregionpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,{"inputs":[{"name":"whereregionpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"whereregionpredicate"}],"output":{"name":"whereregionpredicate"}}],[11,"fmt","","",85,{"inputs":[{"name":"whereeqpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"whereeqpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,{"inputs":[{"name":"whereeqpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"whereeqpredicate"}],"output":{"name":"whereeqpredicate"}}],[11,"fmt","","",86,{"inputs":[{"name":"crate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"crate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"crate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"crate"}],"output":{"name":"crate"}}],[11,"fmt","","",87,{"inputs":[{"name":"metaitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"metaitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,{"inputs":[{"name":"metaitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"metaitem_"}],"output":{"name":"metaitem_"}}],[11,"eq","","",87,{"inputs":[{"name":"metaitem_"},{"name":"metaitem_"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"block"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"block"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",88,{"inputs":[{"name":"pat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"pat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"pat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"pat"}],"output":{"name":"pat"}}],[11,"fmt","","",89,{"inputs":[{"name":"fieldpat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"fieldpat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"fieldpat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fmt","","",90,{"inputs":[{"name":"bindingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"bindingmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"bindingmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"bindingmode"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",91,{"inputs":[{"name":"patwildkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"patwildkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,{"inputs":[{"name":"patwildkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"patwildkind"},{"name":"patwildkind"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"patwildkind"},{"name":"patwildkind"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"patwildkind"}],"output":{"name":"patwildkind"}}],[11,"fmt","","",92,{"inputs":[{"name":"pat_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"pat_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,{"inputs":[{"name":"pat_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"pat_"}],"output":{"name":"pat_"}}],[11,"fmt","","",93,{"inputs":[{"name":"mutability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"mutability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,{"inputs":[{"name":"mutability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"mutability"}],"output":{"name":"mutability"}}],[11,"fmt","","",94,{"inputs":[{"name":"binop_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"binop_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"binop_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"binop_"}],"output":{"name":"binop_"}}],[11,"fmt","","",95,{"inputs":[{"name":"unop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"unop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"unop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"unop"}],"output":{"name":"unop"}}],[11,"fmt","","",96,{"inputs":[{"name":"stmt_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"stmt_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"stmt_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"stmt_"}],"output":{"name":"stmt_"}}],[11,"fmt","","",97,{"inputs":[{"name":"macstmtstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"macstmtstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,{"inputs":[{"name":"macstmtstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"macstmtstyle"}],"output":{"name":"macstmtstyle"}}],[11,"fmt","","",98,{"inputs":[{"name":"localsource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"localsource"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"localsource"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"localsource"},{"name":"localsource"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"localsource"},{"name":"localsource"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"localsource"}],"output":{"name":"localsource"}}],[11,"fmt","","",99,{"inputs":[{"name":"local"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"local"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,{"inputs":[{"name":"local"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"fmt","","",100,{"inputs":[{"name":"decl_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"decl_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,{"inputs":[{"name":"decl_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"decl_"}],"output":{"name":"decl_"}}],[11,"fmt","","",41,{"inputs":[{"name":"arm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"arm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"arm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"arm"}],"output":{"name":"arm"}}],[11,"fmt","","",101,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"field"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"field"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"fmt","","",102,{"inputs":[{"name":"blockcheckmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"blockcheckmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,{"inputs":[{"name":"blockcheckmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"blockcheckmode"}],"output":{"name":"blockcheckmode"}}],[11,"fmt","","",103,{"inputs":[{"name":"unsafesource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"unsafesource"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"unsafesource"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"unsafesource"}],"output":{"name":"unsafesource"}}],[11,"fmt","","",104,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"expr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"expr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"fmt","","",105,{"inputs":[{"name":"expr_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"expr_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"expr_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"expr_"}],"output":{"name":"expr_"}}],[11,"fmt","","",106,{"inputs":[{"name":"qself"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"qself"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"qself"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"qself"}],"output":{"name":"qself"}}],[11,"fmt","","",107,{"inputs":[{"name":"matchsource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"matchsource"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,{"inputs":[{"name":"matchsource"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"matchsource"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"matchsource"},{"name":"matchsource"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"matchsource"}],"output":{"name":"matchsource"}}],[11,"fmt","","",108,{"inputs":[{"name":"captureclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"captureclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"captureclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"captureclause"}],"output":{"name":"captureclause"}}],[11,"fmt","","",109,{"inputs":[{"name":"delimited"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"delimited"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"delimited"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"delimited"}],"output":{"name":"delimited"}}],[11,"open_token","","Returns the opening delimiter as a token.",109,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",109,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",109,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",109,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"fmt","","",110,{"inputs":[{"name":"sequencerepetition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"sequencerepetition"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"sequencerepetition"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"sequencerepetition"}],"output":{"name":"sequencerepetition"}}],[11,"fmt","","",111,{"inputs":[{"name":"kleeneop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"kleeneop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,{"inputs":[{"name":"kleeneop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"kleeneop"}],"output":{"name":"kleeneop"}}],[11,"fmt","","",31,{"inputs":[{"name":"tokentree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"tokentree"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"tokentree"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"len","","",31,{"inputs":[{"name":"tokentree"}],"output":{"name":"usize"}}],[11,"get_tt","","",31,{"inputs":[{"name":"tokentree"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"get_span","","Returns the `Span` corresponding to this token tree.",31,{"inputs":[{"name":"tokentree"}],"output":{"name":"span"}}],[11,"parse","","Use this token tree as a matcher to parse given tts.",31,null],[11,"fmt","","",112,{"inputs":[{"name":"mac_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"mac_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,{"inputs":[{"name":"mac_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"mac_"}],"output":{"name":"mac_"}}],[11,"fmt","","",113,{"inputs":[{"name":"strstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"strstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,{"inputs":[{"name":"strstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"strstyle"}],"output":{"name":"strstyle"}}],[11,"fmt","","",114,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"decode","","",114,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"new","","",114,{"inputs":[{"name":"sign"},{"name":"t"}],"output":{"name":"sign"}}],[11,"fmt","","",115,{"inputs":[{"name":"litinttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"decode","","",115,{"inputs":[{"name":"litinttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",115,{"inputs":[{"name":"litinttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"litinttype"}],"output":{"name":"litinttype"}}],[11,"suffix_len","","",115,{"inputs":[{"name":"litinttype"}],"output":{"name":"usize"}}],[11,"fmt","","",116,{"inputs":[{"name":"lit_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"decode","","",116,{"inputs":[{"name":"lit_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",116,{"inputs":[{"name":"lit_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"lit_"}],"output":{"name":"lit_"}}],[11,"fmt","","",117,{"inputs":[{"name":"mutty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"decode","","",117,{"inputs":[{"name":"mutty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",117,{"inputs":[{"name":"mutty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fmt","","",118,{"inputs":[{"name":"typefield"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"decode","","",118,{"inputs":[{"name":"typefield"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"typefield"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"typefield"},{"name":"typefield"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"typefield"},{"name":"typefield"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"typefield"}],"output":{"name":"typefield"}}],[11,"fmt","","",119,{"inputs":[{"name":"methodsig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"decode","","",119,{"inputs":[{"name":"methodsig"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",119,{"inputs":[{"name":"methodsig"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fmt","","",120,{"inputs":[{"name":"traititem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"decode","","",120,{"inputs":[{"name":"traititem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",120,{"inputs":[{"name":"traititem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fmt","","",121,{"inputs":[{"name":"traititem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"decode","","",121,{"inputs":[{"name":"traititem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",121,{"inputs":[{"name":"traititem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"traititem_"}],"output":{"name":"traititem_"}}],[11,"fmt","","",122,{"inputs":[{"name":"implitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"decode","","",122,{"inputs":[{"name":"implitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",122,{"inputs":[{"name":"implitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fmt","","",123,{"inputs":[{"name":"implitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"decode","","",123,{"inputs":[{"name":"implitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",123,{"inputs":[{"name":"implitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"implitem_"},{"name":"implitem_"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"implitem_"},{"name":"implitem_"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"implitem_"}],"output":{"name":"implitem_"}}],[11,"hash","","",124,null],[11,"decode","","",124,{"inputs":[{"name":"intty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",124,{"inputs":[{"name":"intty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"intty"}],"output":{"name":"intty"}}],[11,"fmt","","",124,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"suffix_len","","",124,{"inputs":[{"name":"intty"}],"output":{"name":"usize"}}],[11,"hash","","",125,null],[11,"decode","","",125,{"inputs":[{"name":"uintty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",125,{"inputs":[{"name":"uintty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"uintty"}],"output":{"name":"uintty"}}],[11,"suffix_len","","",125,{"inputs":[{"name":"uintty"}],"output":{"name":"usize"}}],[11,"fmt","","",125,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"decode","","",126,{"inputs":[{"name":"floatty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",126,{"inputs":[{"name":"floatty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"floatty"}],"output":{"name":"floatty"}}],[11,"fmt","","",126,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"suffix_len","","",126,{"inputs":[{"name":"floatty"}],"output":{"name":"usize"}}],[11,"fmt","","",127,{"inputs":[{"name":"typebinding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"decode","","",127,{"inputs":[{"name":"typebinding"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",127,{"inputs":[{"name":"typebinding"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"fmt","","",36,{"inputs":[{"name":"ty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"ty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"ty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"fmt","","",128,{"inputs":[{"name":"primty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"decode","","",128,{"inputs":[{"name":"primty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",128,{"inputs":[{"name":"primty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"primty"}],"output":{"name":"primty"}}],[11,"fmt","","",129,{"inputs":[{"name":"barefnty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"decode","","",129,{"inputs":[{"name":"barefnty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",129,{"inputs":[{"name":"barefnty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"barefnty"}],"output":{"name":"barefnty"}}],[11,"fmt","","",130,{"inputs":[{"name":"ty_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"decode","","",130,{"inputs":[{"name":"ty_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",130,{"inputs":[{"name":"ty_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"ty_"}],"output":{"name":"ty_"}}],[11,"fmt","","",131,{"inputs":[{"name":"asmdialect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"decode","","",131,{"inputs":[{"name":"asmdialect"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",131,{"inputs":[{"name":"asmdialect"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"asmdialect"}],"output":{"name":"asmdialect"}}],[11,"fmt","","",132,{"inputs":[{"name":"inlineasm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"decode","","",132,{"inputs":[{"name":"inlineasm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",132,{"inputs":[{"name":"inlineasm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"inlineasm"}],"output":{"name":"inlineasm"}}],[11,"fmt","","",133,{"inputs":[{"name":"arg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"decode","","",133,{"inputs":[{"name":"arg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",133,{"inputs":[{"name":"arg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"arg"}],"output":{"name":"arg"}}],[11,"new_self","","",133,{"inputs":[{"name":"arg"},{"name":"span"},{"name":"mutability"},{"name":"ident"}],"output":{"name":"arg"}}],[11,"fmt","","",134,{"inputs":[{"name":"fndecl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"decode","","",134,{"inputs":[{"name":"fndecl"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",134,{"inputs":[{"name":"fndecl"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fmt","","",135,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"decode","","",135,{"inputs":[{"name":"unsafety"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",135,{"inputs":[{"name":"unsafety"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"unsafety"}],"output":{"name":"unsafety"}}],[11,"fmt","","",136,{"inputs":[{"name":"constness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"decode","","",136,{"inputs":[{"name":"constness"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",136,{"inputs":[{"name":"constness"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"constness"}],"output":{"name":"constness"}}],[11,"fmt","","",135,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"decode","","",137,{"inputs":[{"name":"implpolarity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",137,{"inputs":[{"name":"implpolarity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"implpolarity"}],"output":{"name":"implpolarity"}}],[11,"fmt","","",137,{"inputs":[{"name":"implpolarity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"functionretty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"decode","","",138,{"inputs":[{"name":"functionretty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",138,{"inputs":[{"name":"functionretty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"functionretty"}],"output":{"name":"functionretty"}}],[11,"span","","",138,{"inputs":[{"name":"functionretty"}],"output":{"name":"span"}}],[11,"fmt","","",139,{"inputs":[{"name":"explicitself_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"decode","","",139,{"inputs":[{"name":"explicitself_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",139,{"inputs":[{"name":"explicitself_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"explicitself_"}],"output":{"name":"explicitself_"}}],[11,"fmt","","",140,{"inputs":[{"name":"mod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"decode","","",140,{"inputs":[{"name":"mod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",140,{"inputs":[{"name":"mod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"mod"}],"output":{"name":"mod"}}],[11,"fmt","","",141,{"inputs":[{"name":"foreignmod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",141,null],[11,"decode","","",141,{"inputs":[{"name":"foreignmod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",141,{"inputs":[{"name":"foreignmod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fmt","","",142,{"inputs":[{"name":"variantarg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",142,null],[11,"decode","","",142,{"inputs":[{"name":"variantarg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",142,{"inputs":[{"name":"variantarg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"variantarg"},{"name":"variantarg"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"variantarg"},{"name":"variantarg"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"variantarg"}],"output":{"name":"variantarg"}}],[11,"fmt","","",143,{"inputs":[{"name":"variantkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"decode","","",143,{"inputs":[{"name":"variantkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",143,{"inputs":[{"name":"variantkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"variantkind"},{"name":"variantkind"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"variantkind"},{"name":"variantkind"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"variantkind"}],"output":{"name":"variantkind"}}],[11,"fmt","","",144,{"inputs":[{"name":"enumdef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"decode","","",144,{"inputs":[{"name":"enumdef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",144,{"inputs":[{"name":"enumdef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"enumdef"}],"output":{"name":"enumdef"}}],[11,"fmt","","",145,{"inputs":[{"name":"variant_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",145,null],[11,"decode","","",145,{"inputs":[{"name":"variant_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",145,{"inputs":[{"name":"variant_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"variant_"}],"output":{"name":"variant_"}}],[11,"fmt","","",146,{"inputs":[{"name":"pathlistitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"decode","","",146,{"inputs":[{"name":"pathlistitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",146,{"inputs":[{"name":"pathlistitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"pathlistitem_"}}],[11,"id","","",146,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"u32"}}],[11,"fmt","","",147,{"inputs":[{"name":"viewpath_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"decode","","",147,{"inputs":[{"name":"viewpath_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",147,{"inputs":[{"name":"viewpath_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"viewpath_"}],"output":{"name":"viewpath_"}}],[11,"fmt","","",148,{"inputs":[{"name":"attrstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",148,null],[11,"decode","","",148,{"inputs":[{"name":"attrstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",148,{"inputs":[{"name":"attrstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",149,{"inputs":[{"name":"attrid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"decode","","",149,{"inputs":[{"name":"attrid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",149,{"inputs":[{"name":"attrid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"attrid"}],"output":{"name":"attrid"}}],[11,"fmt","","",150,{"inputs":[{"name":"attribute_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"decode","","",150,{"inputs":[{"name":"attribute_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",150,{"inputs":[{"name":"attribute_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"attribute_"}],"output":{"name":"attribute_"}}],[11,"fmt","","",151,{"inputs":[{"name":"traitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"decode","","",151,{"inputs":[{"name":"traitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",151,{"inputs":[{"name":"traitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fmt","","",152,{"inputs":[{"name":"polytraitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"decode","","",152,{"inputs":[{"name":"polytraitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",152,{"inputs":[{"name":"polytraitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fmt","","",153,{"inputs":[{"name":"visibility"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"decode","","",153,{"inputs":[{"name":"visibility"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",153,{"inputs":[{"name":"visibility"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"inherit_from","","",153,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fmt","","",154,{"inputs":[{"name":"structfield_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"structfield_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",154,{"inputs":[{"name":"structfield_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"structfield_"}],"output":{"name":"structfield_"}}],[11,"ident","","",154,{"inputs":[{"name":"structfield_"}],"output":{"name":"option"}}],[11,"fmt","","",155,{"inputs":[{"name":"structfieldkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"structfieldkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",155,{"inputs":[{"name":"structfieldkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"structfieldkind"}}],[11,"is_unnamed","","",155,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"structdef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"structdef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",156,{"inputs":[{"name":"structdef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"structdef"},{"name":"structdef"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"structdef"},{"name":"structdef"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"structdef"}],"output":{"name":"structdef"}}],[11,"fmt","","",157,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"decode","","",157,{"inputs":[{"name":"item"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",157,{"inputs":[{"name":"item"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"fmt","","",158,{"inputs":[{"name":"item_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"item_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",158,{"inputs":[{"name":"item_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"item_"}],"output":{"name":"item_"}}],[11,"descriptive_variant","","",158,{"inputs":[{"name":"item_"}],"output":{"name":"str"}}],[11,"fmt","","",159,{"inputs":[{"name":"foreignitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"decode","","",159,{"inputs":[{"name":"foreignitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",159,{"inputs":[{"name":"foreignitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",160,{"inputs":[{"name":"foreignitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"decode","","",160,{"inputs":[{"name":"foreignitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",160,{"inputs":[{"name":"foreignitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"foreignitem_"}}],[11,"descriptive_variant","","",160,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"str"}}],[11,"fmt","","",161,{"inputs":[{"name":"inlineditem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"decode","","",161,{"inputs":[{"name":"inlineditem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",161,{"inputs":[{"name":"inlineditem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"inlineditem"},{"name":"inlineditem"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"inlineditem"},{"name":"inlineditem"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"inlineditem"}],"output":{"name":"inlineditem"}}],[11,"fmt","","",162,{"inputs":[{"name":"macrodef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"macrodef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,{"inputs":[{"name":"macrodef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"macrodef"}],"output":{"name":"macrodef"}}],[11,"fmt","syntax::abi","",163,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"os"}],"output":{"name":"os"}}],[11,"fmt","","",164,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"abi"}],"output":{"name":"abi"}}],[11,"decode","","",164,{"inputs":[{"name":"abi"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",164,{"inputs":[{"name":"abi"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"eq","","",164,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"architecture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"architecture"}],"output":{"name":"architecture"}}],[11,"clone","","",166,{"inputs":[{"name":"abidata"}],"output":{"name":"abidata"}}],[11,"clone","","",167,{"inputs":[{"name":"abiarchitecture"}],"output":{"name":"abiarchitecture"}}],[11,"index","","",164,{"inputs":[{"name":"abi"}],"output":{"name":"usize"}}],[11,"data","","",164,{"inputs":[{"name":"abi"}],"output":{"name":"abidata"}}],[11,"name","","",164,{"inputs":[{"name":"abi"}],"output":{"name":"str"}}],[11,"fmt","","",164,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","syntax::ast_map::blocks","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"fnlikenode"}}],[11,"is_fn_like","syntax::ast","",157,{"inputs":[{"name":"item"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",120,{"inputs":[{"name":"traititem"}],"output":{"name":"bool"}}],[11,"is_fn_like","","",104,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","syntax::ast_map::blocks","",169,{"inputs":[{"name":"code"}],"output":{"name":"code"}}],[11,"id","","",169,{"inputs":[{"name":"code"}],"output":{"name":"u32"}}],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",169,{"inputs":[{"name":"code"},{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",168,{"inputs":[{"name":"fnlikenode"},{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"fnparts"}}],[11,"body","","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"block"}}],[11,"decl","","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"fndecl"}}],[11,"span","","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"span"}}],[11,"id","","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"u32"}}],[11,"kind","","",168,{"inputs":[{"name":"fnlikenode"}],"output":{"name":"fnkind"}}],[11,"fmt","syntax::ast_map","",170,{"inputs":[{"name":"pathelem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"pathelem"},{"name":"pathelem"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"pathelem"},{"name":"pathelem"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"pathelem"}],"output":{"name":"pathelem"}}],[11,"name","","",170,{"inputs":[{"name":"pathelem"}],"output":{"name":"name"}}],[11,"fmt","","",170,{"inputs":[{"name":"pathelem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"linkedpathnode"}],"output":{"name":"linkedpathnode"}}],[11,"clone","","",172,{"inputs":[{"name":"linkedpath"}],"output":{"name":"linkedpath"}}],[11,"empty","","",172,{"inputs":[{"name":"linkedpath"}],"output":{"name":"linkedpath"}}],[11,"from","","",172,{"inputs":[{"name":"linkedpath"},{"name":"linkedpathnode"}],"output":{"name":"linkedpath"}}],[11,"next","","",172,{"inputs":[{"name":"linkedpath"}],"output":{"name":"option"}}],[11,"fmt","","",173,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"fmt","","",174,{"inputs":[{"name":"mapentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"mapentry"}],"output":{"name":"mapentry"}}],[11,"fmt","","",175,{"inputs":[{"name":"inlinedparent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",176,{"inputs":[{"name":"forest"},{"name":"crate"}],"output":{"name":"forest"}}],[11,"krate","","",176,{"inputs":[{"name":"forest"}],"output":{"name":"crate"}}],[11,"krate","","",177,{"inputs":[{"name":"map"}],"output":{"name":"crate"}}],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"node"}}],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_parent","","Retrieve the parent NodeId for `id`, or `id` itself if no\nparent is registered in this map.",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"get_parent_did","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"defid"}}],[11,"get_foreign_abi","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"abi"}}],[11,"get_foreign_vis","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"visibility"}}],[11,"expect_item","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"item"}}],[11,"expect_struct","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"structdef"}}],[11,"expect_variant","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"spanned"}}],[11,"expect_foreign_item","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"foreignitem"}}],[11,"expect_expr","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"expr"}}],[11,"get_path_elem","","returns the name associated with the given NodeId's AST",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"pathelem"}}],[11,"with_path","","",177,{"inputs":[{"name":"map"},{"name":"u32"},{"name":"f"}],"output":{"name":"t"}}],[11,"path_to_string","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"string"}}],[11,"attrs","","Given a node ID, get a list of of attributes associated with the AST\ncorresponding to the Node ID",177,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",177,null],[11,"opt_span","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"option"}}],[11,"span","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"span"}}],[11,"def_id_span","","",177,{"inputs":[{"name":"map"},{"name":"defid"},{"name":"span"}],"output":{"name":"span"}}],[11,"node_to_string","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"string"}}],[11,"node_to_user_string","","",177,{"inputs":[{"name":"map"},{"name":"u32"}],"output":{"name":"string"}}],[11,"next","","",178,{"inputs":[{"name":"nodesmatchingsuffix"}],"output":{"name":"option"}}],[11,"name","syntax::codemap","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"name"}}],[11,"name","syntax::ast","",157,{"inputs":[{"name":"item"}],"output":{"name":"name"}}],[11,"name","","",159,{"inputs":[{"name":"foreignitem"}],"output":{"name":"name"}}],[11,"name","","",145,{"inputs":[{"name":"variant_"}],"output":{"name":"name"}}],[11,"name","","",120,{"inputs":[{"name":"traititem"}],"output":{"name":"name"}}],[11,"name","","",122,{"inputs":[{"name":"implitem"}],"output":{"name":"name"}}],[11,"new_id","syntax::ast_map","",179,{"inputs":[{"name":"idandspanupdater"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"new_span","","",179,{"inputs":[{"name":"idandspanupdater"},{"name":"span"}],"output":{"name":"span"}}],[11,"visit_item","","",180,null],[11,"visit_trait_item","","",180,null],[11,"visit_impl_item","","",180,null],[11,"visit_pat","","",180,null],[11,"visit_expr","","",180,null],[11,"visit_stmt","","",180,null],[11,"visit_fn","","",180,null],[11,"visit_ty","","",180,null],[11,"visit_block","","",180,null],[11,"visit_lifetime_ref","","",180,null],[11,"visit_lifetime_def","","",180,null],[11,"print_node","syntax::print::pprust","",181,{"inputs":[{"name":"state"},{"name":"node"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast_util","",182,{"inputs":[{"name":"idrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",182,{"inputs":[{"name":"idrange"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",182,{"inputs":[{"name":"idrange"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"max","","",182,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"empty","","",182,{"inputs":[{"name":"idrange"}],"output":{"name":"bool"}}],[11,"add","","",182,null],[11,"visit_mod","","",183,null],[11,"visit_foreign_item","","",183,null],[11,"visit_item","","",183,null],[11,"visit_local","","",183,null],[11,"visit_block","","",183,null],[11,"visit_stmt","","",183,null],[11,"visit_pat","","",183,null],[11,"visit_expr","","",183,null],[11,"visit_ty","","",183,null],[11,"visit_generics","","",183,null],[11,"visit_fn","","",183,null],[11,"visit_struct_field","","",183,null],[11,"visit_struct_def","","",183,null],[11,"visit_trait_item","","",183,null],[11,"visit_impl_item","","",183,null],[11,"visit_lifetime_ref","","",183,null],[11,"visit_lifetime_def","","",183,null],[11,"visit_trait_ref","","",183,null],[11,"visit_id","","",184,null],[11,"check_name","syntax::codemap","",33,{"inputs":[{"name":"spanned"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"internedstring"}}],[11,"value_str","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"meta_item_list","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"span","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"span"}}],[11,"name","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"internedstring"}}],[11,"value_str","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"meta_item_list","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"span","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"span"}}],[11,"name","syntax::ptr","",40,{"inputs":[{"name":"p"}],"output":{"name":"internedstring"}}],[11,"value_str","","",40,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"meta_item_list","","",40,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"span","","",40,{"inputs":[{"name":"p"}],"output":{"name":"span"}}],[11,"meta","syntax::codemap","Extract the MetaItem from inside this Attribute.",33,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",33,{"inputs":[{"name":"spanned"},{"name":"f"}],"output":{"name":"t"}}],[11,"eq","syntax::attr","",185,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"inlineattr"}],"output":{"name":"inlineattr"}}],[11,"hash","","",186,null],[11,"eq","","",186,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"stability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"stability"}],"output":{"name":"stability"}}],[11,"decode","","",186,{"inputs":[{"name":"stability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",186,{"inputs":[{"name":"stability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"partial_cmp","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"decode","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"stabilitylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"reprattr"}],"output":{"name":"reprattr"}}],[11,"decode","","",188,{"inputs":[{"name":"reprattr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",188,{"inputs":[{"name":"reprattr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"reprattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"is_ffi_safe","","",188,{"inputs":[{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"inttype"}],"output":{"name":"inttype"}}],[11,"decode","","",189,{"inputs":[{"name":"inttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",189,{"inputs":[{"name":"inttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"inttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",189,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"hash","","",189,null],[11,"is_signed","","",189,{"inputs":[{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","syntax::codemap","",190,{"inputs":[{"name":"bytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",190,null],[11,"eq","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"fmt","","",191,{"inputs":[{"name":"charpos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",191,null],[11,"eq","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"from_usize","","",190,{"inputs":[{"name":"bytepos"},{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",190,{"inputs":[{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"add","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",190,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",190,{"inputs":[{"name":"bytepos"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",190,{"inputs":[{"name":"bytepos"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",191,{"inputs":[{"name":"charpos"},{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",191,{"inputs":[{"name":"charpos"}],"output":{"name":"usize"}}],[11,"add","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",191,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"hash","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"span"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"fmt","","",33,{"inputs":[{"name":"spanned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"spanned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"spanned"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"eq","","",192,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"encode","","",192,{"inputs":[{"name":"span"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",192,{"inputs":[{"name":"span"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"loc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"locwithopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"filemapandline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"filemapandbytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"macroformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",197,null],[11,"clone","","",197,{"inputs":[{"name":"macroformat"}],"output":{"name":"macroformat"}}],[11,"fmt","","",198,{"inputs":[{"name":"nameandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",198,null],[11,"clone","","",198,{"inputs":[{"name":"nameandspan"}],"output":{"name":"nameandspan"}}],[11,"fmt","","",199,{"inputs":[{"name":"expninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",199,null],[11,"decode","","",200,{"inputs":[{"name":"expnid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",200,{"inputs":[{"name":"expnid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",200,null],[11,"fmt","","",200,{"inputs":[{"name":"expnid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"expnid"}],"output":{"name":"expnid"}}],[11,"eq","","",200,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"from_u32","","",200,{"inputs":[{"name":"expnid"},{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",200,{"inputs":[{"name":"expnid"}],"output":{"name":"u32"}}],[11,"eq","","",201,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",201,{"inputs":[{"name":"lineinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",201,{"inputs":[{"name":"lineinfo"}],"output":{"name":"lineinfo"}}],[11,"eq","","",202,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"decode","","",202,{"inputs":[{"name":"multibytechar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",202,{"inputs":[{"name":"multibytechar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"multibytechar"}],"output":{"name":"multibytechar"}}],[11,"encode","","",203,{"inputs":[{"name":"filemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",203,{"inputs":[{"name":"filemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"filemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",203,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",203,{"inputs":[{"name":"filemap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",203,null],[11,"is_real_file","","",203,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"is_imported","","",203,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"file_exists","","",204,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"bool"}}],[11,"read_file","","",204,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",205,{"inputs":[{"name":"codemap"}],"output":{"name":"codemap"}}],[11,"with_file_loader","","",205,{"inputs":[{"name":"codemap"},{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",205,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",205,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","",205,{"inputs":[{"name":"codemap"},{"name":"string"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",205,{"inputs":[{"name":"codemap"},{"name":"string"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",205,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",205,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",205,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"span_to_string","","",205,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",205,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_lines","","",205,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"span_to_snippet","","",205,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",205,{"inputs":[{"name":"codemap"},{"name":"str"}],"output":{"name":"rc"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",205,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap and above.",205,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"record_expansion","","",205,{"inputs":[{"name":"codemap"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",205,{"inputs":[{"name":"codemap"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",205,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",206,{"inputs":[{"name":"spanlineserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"spanlineserror"}],"output":{"name":"spanlineserror"}}],[11,"fmt","","",207,{"inputs":[{"name":"spansnippeterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",207,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"spansnippeterror"}],"output":{"name":"spansnippeterror"}}],[11,"fmt","","",208,{"inputs":[{"name":"distinctsources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",208,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"distinctsources"}],"output":{"name":"distinctsources"}}],[11,"fmt","","",209,{"inputs":[{"name":"malformedcodemappositions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"malformedcodemappositions"}],"output":{"name":"malformedcodemappositions"}}],[11,"fold_mod","syntax::config","",210,{"inputs":[{"name":"context"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_block","","",210,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_mod","","",210,{"inputs":[{"name":"context"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_underscore","","",210,{"inputs":[{"name":"context"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_expr","","",210,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",210,{"inputs":[{"name":"context"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"fold_item","","",210,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_attribute","","",211,{"inputs":[{"name":"cfgattrfolder"},{"name":"spanned"}],"output":{"name":"option"}}],[11,"fold_mac","","",211,{"inputs":[{"name":"cfgattrfolder"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"clone","syntax::diagnostic","",212,{"inputs":[{"name":"renderspan"}],"output":{"name":"renderspan"}}],[11,"clone","","",213,{"inputs":[{"name":"colorconfig"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",214,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"fatalerror"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",214,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",214,{"inputs":[{"name":"fatalerror"}],"output":{"name":"str"}}],[11,"fmt","","",215,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"explicitbug"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",215,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",215,{"inputs":[{"name":"explicitbug"}],"output":{"name":"str"}}],[11,"new","","",216,{"inputs":[{"name":"spanhandler"},{"name":"handler"},{"name":"codemap"}],"output":{"name":"spanhandler"}}],[11,"span_fatal","","",216,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",216,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",216,null],[11,"span_err_with_code","","",216,null],[11,"span_warn","","",216,null],[11,"span_warn_with_code","","",216,null],[11,"span_note","","",216,null],[11,"span_end_note","","",216,null],[11,"span_help","","",216,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",216,null],[11,"fileline_note","","",216,null],[11,"fileline_help","","",216,null],[11,"span_bug","","",216,null],[11,"span_unimpl","","",216,null],[11,"handler","","",216,{"inputs":[{"name":"spanhandler"}],"output":{"name":"handler"}}],[11,"new","","",217,{"inputs":[{"name":"handler"},{"name":"colorconfig"},{"name":"option"},{"name":"bool"}],"output":{"name":"handler"}}],[11,"with_emitter","","",217,{"inputs":[{"name":"handler"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"fatal","","",217,null],[11,"err","","",217,null],[11,"bump_err_count","","",217,null],[11,"err_count","","",217,{"inputs":[{"name":"handler"}],"output":{"name":"usize"}}],[11,"has_errors","","",217,{"inputs":[{"name":"handler"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",217,null],[11,"warn","","",217,null],[11,"note","","",217,null],[11,"help","","",217,null],[11,"bug","","",217,null],[11,"unimpl","","",217,null],[11,"emit","","",217,null],[11,"emit_with_code","","",217,null],[11,"custom_emit","","",217,null],[11,"fmt","","",218,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"level"}],"output":{"name":"level"}}],[11,"eq","","",218,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stderr","","",219,{"inputs":[{"name":"emitterwriter"},{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",219,{"inputs":[{"name":"emitterwriter"},{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",220,null],[11,"flush","","",220,{"inputs":[{"name":"destination"}],"output":{"name":"result"}}],[11,"emit","","",219,null],[11,"custom_emit","","",219,null],[11,"fmt","syntax::feature_gate","",221,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",221,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"eq","","",221,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"new","","",222,{"inputs":[{"name":"features"}],"output":{"name":"features"}}],[11,"visit_mac","","",223,null],[11,"visit_attribute","","",223,null],[11,"visit_attribute","","",224,null],[11,"visit_name","","",224,null],[11,"visit_item","","",224,null],[11,"visit_foreign_item","","",224,null],[11,"visit_expr","","",224,null],[11,"visit_pat","","",224,null],[11,"visit_fn","","",224,null],[11,"visit_trait_item","","",224,null],[11,"visit_impl_item","","",224,null],[11,"move_map","collections::vec","",32,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"move_map","syntax::owned_slice","",225,{"inputs":[{"name":"ownedslice"},{"name":"f"}],"output":{"name":"ownedslice"}}],[11,"cmp","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"option"}}],[11,"lt","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"le","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"gt","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"ge","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"eq","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"hash","","",225,null],[11,"fmt","","",225,{"inputs":[{"name":"ownedslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",225,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"from_vec","","",225,{"inputs":[{"name":"ownedslice"},{"name":"vec"}],"output":{"name":"ownedslice"}}],[11,"into_vec","","",225,{"inputs":[{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"as_slice","","",225,null],[11,"move_iter","","",225,{"inputs":[{"name":"ownedslice"}],"output":{"name":"intoiter"}}],[11,"map","","",225,{"inputs":[{"name":"ownedslice"},{"name":"f"}],"output":{"name":"ownedslice"}}],[11,"deref","","",225,null],[11,"default","","",225,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"clone","","",225,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"from_iter","","",225,{"inputs":[{"name":"ownedslice"},{"name":"i"}],"output":{"name":"ownedslice"}}],[11,"encode","","",225,{"inputs":[{"name":"ownedslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",225,{"inputs":[{"name":"ownedslice"},{"name":"d"}],"output":{"name":"result"}}],[11,"and_then","syntax::ptr","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",40,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"u"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",40,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",40,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[11,"clone","","",40,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"eq","","",40,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"p"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_str","syntax::show_span","",226,{"inputs":[{"name":"mode"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_expr","","",227,null],[11,"visit_pat","","",227,null],[11,"visit_ty","","",227,null],[11,"visit_mac","","",227,null],[11,"fold_crate","syntax::std_inject","",228,{"inputs":[{"name":"standardlibraryinjector"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_crate","","",229,{"inputs":[{"name":"preludeinjector"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_item","","",229,{"inputs":[{"name":"preludeinjector"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mod","","",229,{"inputs":[{"name":"preludeinjector"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_crate","syntax::test","",230,{"inputs":[{"name":"testharnessgenerator"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_item","","",230,{"inputs":[{"name":"testharnessgenerator"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mod","","",230,{"inputs":[{"name":"testharnessgenerator"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"eq","","",231,{"inputs":[{"name":"hastestsignature"},{"name":"hastestsignature"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"hastestsignature"},{"name":"hastestsignature"}],"output":{"name":"bool"}}],[11,"clone","syntax::visit","",232,{"inputs":[{"name":"fnkind"}],"output":{"name":"fnkind"}}],[11,"eq","syntax::print::pp","",233,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",233,{"inputs":[{"name":"breaks"}],"output":{"name":"breaks"}}],[11,"clone","","",234,{"inputs":[{"name":"breaktoken"}],"output":{"name":"breaktoken"}}],[11,"clone","","",235,{"inputs":[{"name":"begintoken"}],"output":{"name":"begintoken"}}],[11,"clone","","",236,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_eof","","",236,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",236,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"printstackbreak"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",238,{"inputs":[{"name":"printstackelem"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"token"}}],[11,"replace_last_token","","",239,null],[11,"pretty_print","","",239,{"inputs":[{"name":"printer"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"scan_push","","",239,null],[11,"scan_pop","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_top","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"advance_right","","",239,null],[11,"advance_left","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"check_stack","","",239,null],[11,"print_newline","","",239,{"inputs":[{"name":"printer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",239,null],[11,"get_top","","",239,{"inputs":[{"name":"printer"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",239,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",239,{"inputs":[{"name":"printer"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[11,"clone","syntax::print::pprust","",240,{"inputs":[{"name":"noann"}],"output":{"name":"noann"}}],[11,"clone","","",241,{"inputs":[{"name":"currentcommentandliteral"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",181,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"spanhandler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",181,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"ibox","","",181,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"cbox","","",181,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"rbox","","",181,{"inputs":[{"name":"state"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"nbsp","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"word_nbsp","","",181,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"word_space","","",181,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"pclose","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"head","","",181,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"bclose_","","",181,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",181,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",181,{"inputs":[{"name":"state"},{"name":"span"}],"output":{"name":"result"}}],[11,"is_begin","","",181,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"is_end","","",181,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"is_bol","","",181,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"in_cbox","","",181,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"space_if_not_bol","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",181,{"inputs":[{"name":"state"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",181,{"inputs":[{"name":"state"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep","","",181,null],[11,"commasep_cmnt","","",181,null],[11,"commasep_exprs","","",181,null],[11,"print_mod","","",181,null],[11,"print_foreign_mod","","",181,null],[11,"print_opt_lifetime","","",181,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",181,{"inputs":[{"name":"state"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",181,{"inputs":[{"name":"state"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",181,{"inputs":[{"name":"state"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",181,{"inputs":[{"name":"state"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",181,null],[11,"print_visibility","","",181,{"inputs":[{"name":"state"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",181,{"inputs":[{"name":"state"},{"name":"structdef"},{"name":"generics"},{"name":"ident"},{"name":"span"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",181,{"inputs":[{"name":"state"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",181,null],[11,"print_variant","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_method_sig","","",181,{"inputs":[{"name":"state"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",181,{"inputs":[{"name":"state"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",181,{"inputs":[{"name":"state"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_outer_attributes","","",181,null],[11,"print_inner_attributes","","",181,null],[11,"print_attribute","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_stmt","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_block","","",181,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",181,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",181,{"inputs":[{"name":"state"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",181,null],[11,"print_block_maybe_unclosed","","",181,null],[11,"print_if","","",181,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",181,{"inputs":[{"name":"state"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",181,{"inputs":[{"name":"state"},{"name":"spanned"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"print_expr_maybe_paren","","",181,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",181,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",181,{"inputs":[{"name":"state"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_ident","","",181,{"inputs":[{"name":"state"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",181,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",181,{"inputs":[{"name":"state"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",181,{"inputs":[{"name":"state"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",181,{"inputs":[{"name":"state"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",181,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"option"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args","","",181,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",181,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",181,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",181,{"inputs":[{"name":"state"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",181,null],[11,"print_lifetime","","",181,{"inputs":[{"name":"state"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",181,{"inputs":[{"name":"state"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",181,{"inputs":[{"name":"state"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",181,{"inputs":[{"name":"state"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",181,{"inputs":[{"name":"state"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_meta_item","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_view_path","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_mutability","","",181,{"inputs":[{"name":"state"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",181,{"inputs":[{"name":"state"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",181,{"inputs":[{"name":"state"},{"name":"arg"}],"output":{"name":"result"}}],[11,"print_fn_output","","",181,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",181,{"inputs":[{"name":"state"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"},{"name":"option"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",181,{"inputs":[{"name":"state"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",181,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"print_literal","","",181,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"next_lit","","",181,{"inputs":[{"name":"state"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"maybe_print_comment","","",181,{"inputs":[{"name":"state"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",181,{"inputs":[{"name":"state"},{"name":"comment"}],"output":{"name":"result"}}],[11,"print_string","","",181,{"inputs":[{"name":"state"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"next_comment","","",181,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",181,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",181,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",181,{"inputs":[{"name":"state"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",181,{"inputs":[{"name":"state"},{"name":"unsafety"}],"output":{"name":"result"}}]],"paths":[[3,"Ident"],[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"SmallVector"],[3,"IntoIter"],[3,"Registry"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[4,"Annotatable"],[3,"MacEager"],[3,"DummyResult"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"OrderingOp"],[4,"PtrTy"],[3,"Path"],[4,"Ty"],[3,"LifetimeBounds"],[3,"TraitDef"],[4,"StructType"],[3,"PatIdentFinder"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"Marker"],[3,"MacroExterminator"],[4,"ArgumentType"],[4,"SyntaxContext_"],[4,"TokenTree"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"Path"],[3,"Ty"],[3,"Block"],[3,"Generics"],[3,"WhereClause"],[3,"P"],[3,"Arm"],[3,"TtFrame"],[3,"TtReader"],[4,"LockstepIterSize"],[4,"TokenTreeOrTokenTreeVec"],[3,"MatcherTtFrame"],[3,"MatcherPos"],[3,"ParserAnyMacro"],[3,"MacroRulesMacroExpander"],[3,"Restrictions"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"TokenType"],[3,"Parser"],[4,"CommentStyle"],[3,"Comment"],[3,"Literal"],[3,"TokenAndSpan"],[3,"StringReader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[4,"ObsoleteSyntax"],[3,"ParseSess"],[3,"Name"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"DefId"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[4,"MetaItem_"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatWildKind"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[4,"LocalSource"],[3,"Local"],[4,"Decl_"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"Expr"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[3,"MutTy"],[3,"TypeField"],[3,"MethodSig"],[3,"TraitItem"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItem_"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[3,"TypeBinding"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[4,"AsmDialect"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[3,"Mod"],[3,"ForeignMod"],[3,"VariantArg"],[4,"VariantKind"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField_"],[4,"StructFieldKind"],[3,"StructDef"],[3,"Item"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[4,"InlinedItem"],[3,"MacroDef"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[3,"AbiData"],[4,"AbiArchitecture"],[3,"FnLikeNode"],[4,"Code"],[4,"PathElem"],[3,"LinkedPathNode"],[3,"LinkedPath"],[4,"Node"],[4,"MapEntry"],[3,"InlinedParent"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"IdAndSpanUpdater"],[3,"NodeCollector"],[3,"State"],[3,"IdRange"],[3,"IdVisitor"],[3,"IdRangeComputingVisitor"],[4,"InlineAttr"],[3,"Stability"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[4,"MacroFormat"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"ExpnId"],[3,"LineInfo"],[3,"MultiByteChar"],[3,"FileMap"],[3,"RealFileLoader"],[3,"CodeMap"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"Context"],[3,"CfgAttrFolder"],[4,"RenderSpan"],[4,"ColorConfig"],[3,"FatalError"],[3,"ExplicitBug"],[3,"SpanHandler"],[3,"Handler"],[4,"Level"],[3,"EmitterWriter"],[4,"Destination"],[4,"AttributeType"],[3,"Features"],[3,"MacroVisitor"],[3,"PostExpansionVisitor"],[3,"OwnedSlice"],[4,"Mode"],[3,"ShowSpanVisitor"],[3,"StandardLibraryInjector"],[3,"PreludeInjector"],[3,"TestHarnessGenerator"],[4,"HasTestSignature"],[4,"FnKind"],[4,"Breaks"],[3,"BreakToken"],[3,"BeginToken"],[4,"Token"],[4,"PrintStackBreak"],[3,"PrintStackElem"],[3,"Printer"],[3,"NoAnn"],[3,"CurrentCommentAndLiteral"]]};
searchIndex['docopt'] = {"items":[[0,"","docopt","Docopt for Rust. This implementation conforms to the\n[official description of Docopt](http://docopt.org/) and\n[passes its test suite](https://github.com/docopt/docopt/pull/201).",null,null],[3,"ArgvMap","","A map containing matched values from command line arguments.",null,null],[3,"Decoder","","Decoder for `ArgvMap` into your own `Decodable` types.",null,null],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",null,null],[4,"Error","","Represents the different types of Docopt errors.",null,null],[13,"Usage","","Parsing the usage string failed.",0,null],[13,"Argv","","Parsing the argv specified failed.",0,null],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example\nusage of the program.",0,null],[13,"Decode","","This indicates a problem decoding a successful argv match into a\ndecodable value.",0,null],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the\nfailure message. Typically this wraps `Argv` and `NoMatch` errors.",0,null],[13,"Help","","Decoding or parsing failed because the command line specified that the\nhelp message should be printed.",0,null],[13,"Version","","Decoding or parsing failed because the command line specified that the\nversion should be printed",0,null],[4,"Value","","A matched command line value.",null,null],[13,"Switch","","A boolean value from a flag that has no argument.",1,null],[13,"Counted","","The number of occurrences of a repeated flag.",1,null],[13,"Plain","","A positional or flag argument.",1,null],[13,"List","","A List of positional or flag arguments.",1,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fatal","","Return whether this was a fatal error or not.",0,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"exit","","Print this error and immediately exit the program.",0,{"inputs":[{"name":"error"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"docopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"docopt"}],"output":{"name":"docopt"}}],[11,"new","","Parse the Docopt usage string given.",2,{"inputs":[{"name":"docopt"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","Parse and decode the given argv.",2,{"inputs":[{"name":"docopt"}],"output":{"name":"result"}}],[11,"parse","","Parse command line arguments and try to match them against a usage\npattern specified in the Docopt string.",2,{"inputs":[{"name":"docopt"}],"output":{"name":"result"}}],[11,"argv","","Set the argv to be used for Docopt parsing.",2,{"inputs":[{"name":"docopt"},{"name":"i"}],"output":{"name":"docopt"}}],[11,"options_first","","Enables the \"options first\" Docopt behavior.",2,{"inputs":[{"name":"docopt"},{"name":"bool"}],"output":{"name":"docopt"}}],[11,"help","","Enables automatic handling of `--help`.",2,{"inputs":[{"name":"docopt"},{"name":"bool"}],"output":{"name":"docopt"}}],[11,"version","","Enables automatic handling of `--version`.",2,{"inputs":[{"name":"docopt"},{"name":"option"}],"output":{"name":"docopt"}}],[11,"clone","","",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"argvmap"}}],[11,"decode","","Tries to decode the map of values into a struct.",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"result"}}],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it.\nIf the key does not exist, `false` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it.\nIf the key does not exist, `0` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"u64"}}],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it.\nIf the key does not exist, `\"\"` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"str"}}],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it.\nIf the key does not exist, `vec!()` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"vec"}}],[11,"find","","Return the raw value corresponding to some `key`.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"option"}}],[11,"len","","Return the number of values, not including synonyms.",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"argvmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_bool","","Returns the value as a bool.",1,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,{"inputs":[{"name":"value"}],"output":{"name":"u64"}}],[11,"as_str","","Returns the value as a string.",1,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_vec","","Returns the value as a list of strings.",1,{"inputs":[{"name":"value"}],"output":{"name":"vec"}}],[11,"error","","",4,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"],[3,"Decoder"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",19,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",17,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"ControlCharacterInString","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",42,null],[10,"read_nil","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",43,null],[10,"emit_nil","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['encoding'] = {"items":[[0,"","encoding","# Encoding 0.2.32",null,null],[0,"types","","Interface to the character encoding.",null,null],[3,"CodecError","encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0,null],[12,"cause","","A human-readable cause of the error.",0,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",1,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG \"replacement\" error algorithm.",1,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1,null],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",2,null],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG \"URL\" error algorithms.",2,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG \"<form>\" error algorithms.",2,null],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding.",null,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3,{"inputs":[{"name":"bytewriter"},{"name":"usize"}],"output":null}],[10,"write_byte","","Writes a single byte.",3,{"inputs":[{"name":"bytewriter"},{"name":"u8"}],"output":null}],[10,"write_bytes","","Writes a number of bytes.",3,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4,{"inputs":[{"name":"stringwriter"},{"name":"usize"}],"output":null}],[10,"write_char","","Writes a single character.",4,{"inputs":[{"name":"stringwriter"},{"name":"char"}],"output":null}],[10,"write_str","","Writes a string.",4,{"inputs":[{"name":"stringwriter"},{"name":"str"}],"output":null}],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5,{"inputs":[{"name":"rawencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5,{"inputs":[{"name":"rawencoder"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5,null],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5,{"inputs":[{"name":"rawencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,{"inputs":[{"name":"rawdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,{"inputs":[{"name":"rawdecoder"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6,{"inputs":[{"name":"rawdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"option"}}],[10,"raw_encoder","","Creates a new encoder.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"box"}}],[10,"raw_decoder","","Creates a new decoder.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"box"}}],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7,{"inputs":[{"name":"encoding"},{"name":"str"},{"name":"encodertrap"}],"output":{"name":"result"}}],[11,"encode_to","","Encode into a `ByteWriter`.",7,{"inputs":[{"name":"encoding"},{"name":"str"},{"name":"encodertrap"},{"name":"bytewriter"}],"output":{"name":"result"}}],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7,null],[11,"decode_to","","Decode into a `StringWriter`.",7,null],[11,"writer_hint","collections::vec","",8,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"write_byte","","",8,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[11,"write_bytes","","",8,null],[11,"writer_hint","collections::string","",9,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"write_char","","",9,{"inputs":[{"name":"string"},{"name":"char"}],"output":null}],[11,"write_str","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":null}],[11,"trap","encoding::types","Handles a decoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",1,null],[11,"clone","","",1,{"inputs":[{"name":"decodertrap"}],"output":{"name":"decodertrap"}}],[11,"trap","","Handles an encoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",2,{"inputs":[{"name":"encodertrap"},{"name":"rawencoder"},{"name":"str"},{"name":"bytewriter"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"encodertrap"}],"output":{"name":"encodertrap"}}],[0,"codec","encoding","Codec implementations.",null,null],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[11,"clone","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"errorencoding"}}],[11,"name","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"str"}}],[11,"raw_encoder","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"box"}}],[11,"clone","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"errorencoder"}}],[11,"new","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"box"}}],[11,"from_self","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",11,null],[11,"raw_finish","","",11,{"inputs":[{"name":"errorencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"errordecoder"}}],[11,"new","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"box"}}],[11,"from_self","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",12,null],[11,"raw_finish","","",12,{"inputs":[{"name":"errordecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"ascii","encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[11,"clone","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"asciiencoding"}}],[11,"name","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"str"}}],[11,"raw_encoder","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"box"}}],[11,"clone","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"asciiencoder"}}],[11,"new","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"box"}}],[11,"from_self","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",14,null],[11,"raw_finish","","",14,{"inputs":[{"name":"asciiencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"asciidecoder"}}],[11,"new","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"box"}}],[11,"from_self","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",15,null],[11,"raw_finish","","",15,{"inputs":[{"name":"asciidecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",16,null],[12,"whatwg_name","","",16,null],[12,"index_forward","","",16,null],[12,"index_backward","","",16,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::singlebyte","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"singlebyteencoding"}}],[11,"name","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"box"}}],[11,"clone","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"singlebyteencoder"}}],[11,"new","","",17,null],[11,"from_self","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",17,null],[11,"raw_finish","","",17,{"inputs":[{"name":"singlebyteencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"singlebytedecoder"}}],[11,"new","","",18,null],[11,"from_self","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",18,null],[11,"raw_finish","","",18,{"inputs":[{"name":"singlebytedecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_8","encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib's UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string.",null,null],[11,"clone","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"utf8encoding"}}],[11,"name","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"box"}}],[11,"clone","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"utf8encoder"}}],[11,"new","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"box"}}],[11,"from_self","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",20,null],[11,"raw_finish","","",20,{"inputs":[{"name":"utf8encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"utf8decoder"}}],[11,"new","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"box"}}],[11,"from_self","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",21,null],[11,"raw_finish","","",21,{"inputs":[{"name":"utf8decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_16","encoding::codec","UTF-16.",null,null],[3,"Little","encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[11,"clone","","",22,{"inputs":[{"name":"little"}],"output":{"name":"little"}}],[11,"clone","","",23,{"inputs":[{"name":"big"}],"output":{"name":"big"}}],[11,"clone","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"utf16encoding"}}],[11,"name","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"box"}}],[11,"clone","","",25,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"from_self","","",25,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",25,null],[11,"raw_finish","","",25,{"inputs":[{"name":"utf16encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"new","","",26,{"inputs":[{"name":"utf16decoder"}],"output":{"name":"box"}}],[11,"from_self","","",26,{"inputs":[{"name":"utf16decoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",26,null],[11,"raw_finish","","",26,{"inputs":[{"name":"utf16decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[11,"clone","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"windows949encoding"}}],[11,"name","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"box"}}],[11,"clone","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"windows949encoder"}}],[11,"new","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"box"}}],[11,"from_self","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",28,null],[11,"raw_finish","","",28,{"inputs":[{"name":"windows949encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[11,"clone","","",29,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"eucjpencoding"}}],[11,"name","","",29,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",29,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",29,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",29,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"box"}}],[11,"clone","","",30,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"eucjpencoder"}}],[11,"new","","",30,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"box"}}],[11,"from_self","","",30,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",30,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",30,null],[11,"raw_finish","","",30,{"inputs":[{"name":"eucjpencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"windows31jencoding"}}],[11,"name","","",31,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",31,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",31,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",31,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"box"}}],[11,"clone","","",32,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"windows31jencoder"}}],[11,"new","","",32,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"box"}}],[11,"from_self","","",32,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",32,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",32,null],[11,"raw_finish","","",32,{"inputs":[{"name":"windows31jencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"iso2022jpencoding"}}],[11,"name","","",33,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",33,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",33,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",33,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"box"}}],[11,"clone","","",34,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"iso2022jpencoder"}}],[11,"new","","",34,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"box"}}],[11,"from_self","","",34,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",34,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",34,null],[11,"raw_finish","","",34,{"inputs":[{"name":"iso2022jpencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GBK","encoding::codec::simpchinese","An implementation type for GBK.",null,null],[3,"GB18030","","An implementation type for GB18030.",null,null],[3,"GBEncoding","","GBK and GB 18030-2005.",null,null],[3,"GBEncoder","","An encoder for GBK and GB18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[6,"GBKEncoding","","A type for GBK.",null,null],[6,"GB18030Encoding","","A type for GB18030.",null,null],[17,"GBK_ENCODING","","An instance for GBK.",null,null],[17,"GB18030_ENCODING","","An instance for GB18030.",null,null],[11,"clone","","",35,{"inputs":[{"name":"gbk"}],"output":{"name":"gbk"}}],[11,"clone","","",36,{"inputs":[{"name":"gb18030"}],"output":{"name":"gb18030"}}],[11,"clone","","",37,{"inputs":[{"name":"gbencoding"}],"output":{"name":"gbencoding"}}],[11,"name","","",37,{"inputs":[{"name":"gbencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",37,{"inputs":[{"name":"gbencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",37,{"inputs":[{"name":"gbencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",37,{"inputs":[{"name":"gbencoding"}],"output":{"name":"box"}}],[11,"clone","","",38,{"inputs":[{"name":"gbencoder"}],"output":{"name":"gbencoder"}}],[11,"new","","",38,{"inputs":[{"name":"gbencoder"}],"output":{"name":"box"}}],[11,"from_self","","",38,{"inputs":[{"name":"gbencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",38,{"inputs":[{"name":"gbencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",38,null],[11,"raw_finish","","",38,{"inputs":[{"name":"gbencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"hzencoding"}],"output":{"name":"hzencoding"}}],[11,"name","","",39,{"inputs":[{"name":"hzencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",39,{"inputs":[{"name":"hzencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",39,{"inputs":[{"name":"hzencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",39,{"inputs":[{"name":"hzencoding"}],"output":{"name":"box"}}],[11,"clone","","",40,{"inputs":[{"name":"hzencoder"}],"output":{"name":"hzencoder"}}],[11,"new","","",40,{"inputs":[{"name":"hzencoder"}],"output":{"name":"box"}}],[11,"from_self","","",40,{"inputs":[{"name":"hzencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",40,{"inputs":[{"name":"hzencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",40,null],[11,"raw_finish","","",40,{"inputs":[{"name":"hzencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[11,"clone","","",41,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"bigfive2003encoding"}}],[11,"name","","",41,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",41,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",41,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",41,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"box"}}],[11,"clone","","",42,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"bigfive2003encoder"}}],[11,"new","","",42,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"box"}}],[11,"from_self","","",42,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",42,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",42,null],[11,"raw_finish","","",42,{"inputs":[{"name":"bigfive2003encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::whatwg","",43,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"encoderonlyutf8encoding"}}],[11,"name","","",43,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",43,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",43,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",43,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"box"}}],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[5,"encodings","encoding::all","Returns a list of references to the encodings available.",null,null],[0,"whatwg","","",null,null],[17,"X_USER_DEFINED","encoding::all::whatwg","",null,null],[17,"ISO_8859_8_I","","",null,null],[17,"REPLACEMENT","","",null,null],[17,"ERROR","encoding::all","",null,null],[17,"ASCII","","",null,null],[17,"IBM866","","",null,null],[17,"ISO_8859_1","","",null,null],[17,"ISO_8859_2","","",null,null],[17,"ISO_8859_3","","",null,null],[17,"ISO_8859_4","","",null,null],[17,"ISO_8859_5","","",null,null],[17,"ISO_8859_6","","",null,null],[17,"ISO_8859_7","","",null,null],[17,"ISO_8859_8","","",null,null],[17,"ISO_8859_10","","",null,null],[17,"ISO_8859_13","","",null,null],[17,"ISO_8859_14","","",null,null],[17,"ISO_8859_15","","",null,null],[17,"ISO_8859_16","","",null,null],[17,"KOI8_R","","",null,null],[17,"KOI8_U","","",null,null],[17,"MAC_ROMAN","","",null,null],[17,"WINDOWS_874","","",null,null],[17,"WINDOWS_1250","","",null,null],[17,"WINDOWS_1251","","",null,null],[17,"WINDOWS_1252","","",null,null],[17,"WINDOWS_1253","","",null,null],[17,"WINDOWS_1254","","",null,null],[17,"WINDOWS_1255","","",null,null],[17,"WINDOWS_1256","","",null,null],[17,"WINDOWS_1257","","",null,null],[17,"WINDOWS_1258","","",null,null],[17,"MAC_CYRILLIC","","",null,null],[17,"UTF_8","","",null,null],[17,"UTF_16LE","","",null,null],[17,"UTF_16BE","","",null,null],[17,"WINDOWS_949","","",null,null],[17,"EUC_JP","","",null,null],[17,"WINDOWS_31J","","",null,null],[17,"ISO_2022_JP","","",null,null],[17,"GBK","","",null,null],[17,"GB18030","","",null,null],[17,"HZ","","",null,null],[17,"BIG5_2003","","",null,null],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"Vec"],[3,"String"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"GBK"],[3,"GB18030"],[3,"GBEncoding"],[3,"GBEncoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Regex","","A compiled regular expression",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",1,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a dynamic regular expression with the given size limit.",1,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",1,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"reg_replace","","",2,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"next","","",3,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",11,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}]],"paths":[[4,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['regex_syntax'] = {"items":[[0,"","regex_syntax","This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",1,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",1,null],[12,"chars","regex_syntax::Expr","The characters.",1,null],[12,"casei","","Whether to match case insensitively.",1,null],[13,"AnyChar","regex_syntax","Match any character, excluding new line.",1,null],[13,"AnyCharNoNL","","Match any character.",1,null],[13,"Class","","A character class.",1,null],[13,"StartLine","","Match the start of a line or beginning of input.",1,null],[13,"EndLine","","Match the end of a line or end of input.",1,null],[13,"StartText","","Match the beginning of input.",1,null],[13,"EndText","","Match the end of input.",1,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",1,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",1,null],[13,"Group","","A group, possibly non-capturing.",1,null],[12,"e","regex_syntax::Expr","The expression inside the group.",1,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",1,null],[12,"name","","The capture name, only for capturing named groups.",1,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",1,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",1,null],[12,"r","","The type of repeat operator used.",1,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",1,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",1,null],[13,"Alternate","","An alternation of expressions. Only one must match.",1,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",2,null],[13,"ZeroOrMore","","Match zero or more (`*`).",2,null],[13,"OneOrMore","","Match one or more (`+`).",2,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",2,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",2,null],[12,"max","","Optional upper bound on the number of matches.",2,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",3,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P<a>.)(?P<a>.)`.",3,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",3,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",3,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",3,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",3,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",3,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",3,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",3,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",3,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",3,null],[12,"end","","The second character specified in the range.",3,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",3,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",3,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",3,null],[12,"max","","The second number specified in the repetition.",3,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",3,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",3,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",3,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",3,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",3,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",3,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",3,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",3,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",3,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",3,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",3,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",3,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",3,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",3,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",3,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",3,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",3,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",1,{"inputs":[{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",5,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",5,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",5,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",5,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",5,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",5,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",5,null],[11,"as_slice","","Extracts a slice containing the entire vector.",5,null],[11,"as_mut_slice","","Deprecated: use `&mut s[..]` instead.",5,null],[11,"set_len","","Sets the length of a vector.",5,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",5,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",5,null],[11,"push","","Appends an element to the back of a collection.",5,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",5,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",5,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",5,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",5,null],[11,"len","","Returns the number of elements in the vector.",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",5,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",5,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",5,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",5,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",5,null],[11,"clone","collections::binary_heap","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",6,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",6,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",6,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",6,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",6,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",6,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",6,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",6,null],[11,"clone","","",7,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",7,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",6,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",6,null],[11,"index","collections::bit","",10,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",10,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bitvec"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",10,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",10,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",10,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"bitvec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",10,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",10,null],[11,"set_all","","Sets all bits to 1.",10,null],[11,"negate","","Flips all bits.",10,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",10,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",10,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",10,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"append","","Moves all bits from `other` into `Self`, leaving `other` empty.",10,null],[11,"split_off","","Splits the `BitVec` into two at the given bit,\nretaining the first half in-place and returning the second one.",10,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"none","","Returns `true` if all bits are 0.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",10,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",10,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",10,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",10,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",10,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",10,null],[11,"len","","Returns the total number of bits in this vector",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no bits in this vector",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",10,null],[11,"default","","",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_iter","","",10,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"bitvec"}}],[11,"extend","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"clone_from","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"ordering"}}],[11,"fmt","","",10,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",11,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",11,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",11,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"default","","",12,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"from_iter","","",12,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":{"name":"bitset"}}],[11,"extend","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"ordering"}}],[11,"eq","","",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",12,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",12,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",12,{"inputs":[{"name":"bitset"},{"name":"bitvec"}],"output":{"name":"bitset"}}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",12,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",12,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",12,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",12,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",12,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",12,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",12,{"inputs":[{"name":"bitset"}],"output":{"name":"setiter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",12,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",12,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",12,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",12,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",12,null],[11,"split_off","","Splits the `BitSet` into two at the given key including the key.\nRetains the first part in-place while returning the second part.",12,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"len","","Returns the number of set bits in this set.",12,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",12,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",12,null],[11,"contains","","Returns `true` if this set contains the specified integer.",12,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",12,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",12,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",12,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"blockiter"}],"output":{"name":"blockiter"}}],[11,"clone","","",14,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"twobitpositions"}}],[11,"clone","","",15,{"inputs":[{"name":"setiter"}],"output":{"name":"setiter"}}],[11,"clone","","",16,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",17,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",18,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",19,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",13,{"inputs":[{"name":"blockiter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next","","",14,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next","","",15,{"inputs":[{"name":"setiter"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next","","",16,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next","","",18,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next","","",19,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next","collections::btree::node","",20,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",20,null],[11,"drop","","",21,null],[11,"as_slices","","",21,null],[11,"as_slices_mut","","",21,null],[11,"as_slices_internal","","",21,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",21,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",21,null],[11,"keys_mut","","",21,null],[11,"vals","","",21,null],[11,"vals_mut","","",21,null],[11,"edges","","",21,null],[11,"edges_mut","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",21,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",21,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",21,null],[11,"len","","How many key-value pairs the node contains",21,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",21,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",21,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",21,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",21,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",21,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",22,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",22,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",22,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",22,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",22,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",22,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",22,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",22,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",22,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",22,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",22,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",22,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",22,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",21,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",21,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",21,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",21,null],[11,"clone","","",23,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",23,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",23,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",23,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",23,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",24,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",24,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",24,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",24,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",24,null],[11,"clone","","",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",25,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",26,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",26,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",26,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",27,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",27,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",27,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",29,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",28,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",28,null],[11,"get","","Returns a reference to the value corresponding to the key.",28,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",28,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",28,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",28,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",28,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",30,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",31,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",31,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",32,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",32,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",33,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",33,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",33,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",33,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",33,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",28,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",28,null],[11,"hash","","",28,null],[11,"default","","",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",28,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",28,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",28,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",25,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",25,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",25,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",29,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",35,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",37,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",38,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",39,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",39,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",41,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",42,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",43,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",28,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",28,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",28,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",28,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",44,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",44,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",44,null],[11,"contains","","Returns `true` if the set contains a value.",44,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",44,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",44,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"from_iter","","",44,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",44,null],[11,"default","","",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",44,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",47,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",47,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",48,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",49,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",50,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",51,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","alloc::rc","",52,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",53,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",54,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",54,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",54,null],[11,"into_owned","","Extracts the owned data.",54,null],[11,"deref","","",54,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",54,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",54,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"into_cow","","",54,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",54,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",55,null],[11,"cmp","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",55,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",55,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",55,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",55,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",55,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",55,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",55,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",55,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",55,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",55,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"from_iter","","",55,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",55,null],[11,"clone","core::fmt::rt::v1","",57,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",58,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",59,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",60,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",61,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",63,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"clone","","",64,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",65,null],[11,"iter","","Provides a forward iterator.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",65,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",65,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",65,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",65,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",65,null],[11,"next","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",66,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",65,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",65,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"start","core::ops","",67,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",68,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",69,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",69,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","collections::slice","",70,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",70,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",5,null],[11,"borrow_mut","","",5,null],[11,"clone","collections::slice","",71,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",72,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[11,"next","","",70,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next","","",73,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","collections::str","",74,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",75,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",75,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",77,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",77,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",78,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"borrow","collections::string","",79,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",80,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",81,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",82,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",81,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",81,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",81,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",83,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"eq","","",84,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"haystack","","",83,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",83,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",83,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"cmp","collections::string","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",88,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",79,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",79,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",79,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",79,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",79,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",79,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",79,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",79,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",79,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",79,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",79,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",79,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",79,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",79,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",79,null],[11,"push","","Adds the given character to the end of the string.",79,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",79,null],[11,"truncate","","Shortens a string to the specified length.",79,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",79,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",79,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",79,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",79,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",79,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",79,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",79,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",79,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",88,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",88,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",88,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",79,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",79,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",79,null],[11,"extend","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",54,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",79,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",54,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",79,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",79,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"add","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",79,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",79,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",79,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",79,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",79,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",90,{"inputs":[{"name":"derefstring"}],"output":{"name":"string"}}],[11,"eq","","",91,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",79,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",79,null],[11,"from","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",54,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",54,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",79,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",79,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",79,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",79,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",92,null],[11,"next","","",92,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",5,null],[11,"hash","","",5,null],[11,"index","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"index_mut","","",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",5,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","collections::borrow","",54,null],[11,"ne","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",5,null],[11,"default","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",5,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",54,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[11,"next","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",93,null],[11,"next","","",94,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",94,null],[11,"deref","","",95,{"inputs":[{"name":"derefvec"}],"output":{"name":"vec"}}],[11,"drop","","",95,null],[11,"drop","","",96,null],[11,"drop","","",97,null],[11,"clone","collections::vec_deque","",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",98,null],[11,"default","","",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",98,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",98,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",98,null],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",98,null],[11,"truncate","","Shortens a ringbuf, dropping excess elements from the back.",98,null],[11,"iter","","Returns a front-to-back iterator.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",98,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",98,null],[11,"len","","Returns the number of elements in the `VecDeque`.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",98,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",98,null],[11,"push_back","","Appends an element to the back of a buffer",98,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",98,null],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",98,null],[11,"retain","","Retains only the elements specified by the predicate.",98,null],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",98,null],[11,"clone","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",99,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",99,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",101,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",102,null],[11,"next","","",102,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",98,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",98,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",98,null],[11,"index","","",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",98,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",98,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",98,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","collections::vec_map","",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",103,null],[11,"hash","","",103,null],[11,"new","","Creates an empty `VecMap`.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",103,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",103,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",103,null],[11,"split_off","","Splits the collection into two at the given key.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",103,null],[11,"get","","Returns a reference to the value corresponding to the key.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",104,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",104,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",104,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",105,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",106,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",106,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",106,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",106,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",106,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",103,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",103,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",103,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",103,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",103,null],[11,"index","","",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",103,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",110,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",111,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",110,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"eq","collections","",113,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",114,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",114,null],[11,"default","","",114,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",114,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",114,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",114,null],[11,"eq","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",114,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",114,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",114,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",114,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",114,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",114,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",114,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",114,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"deref","regex_syntax","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"matches","","Returns true if `c` is matched by this character class.",4,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"is_case_insensitive","","Returns true if this character class should be matched case\ninsensitively.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",115,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",115,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",115,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",115,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"CharClass"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"BlockIter"],[3,"TwoBitPositions"],[3,"SetIter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Rc"],[3,"Arc"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"StrSearcher"],[4,"State"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[4,"Bound"],[3,"Box"],[3,"Error"]]};
searchIndex['encoding_index_tradchinese'] = {"items":[[0,"","encoding_index_tradchinese","Traditional Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"big5","","Big5 and HKSCS.",null,null],[5,"forward","encoding_index_tradchinese::big5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding_index_korean'] = {"items":[[0,"","encoding_index_korean","Korean index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"euc_kr","","KS X 1001 plus Unified Hangul Code.",null,null],[5,"forward","encoding_index_korean::euc_kr","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding_index_simpchinese'] = {"items":[[0,"","encoding_index_simpchinese","Simplified Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"gb18030","","GB 18030 two-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"gb18030_ranges","encoding_index_simpchinese","GB 18030 four-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex['uchardet'] = {"items":[[0,"","uchardet","A wrapper around the uchardet library.  Detects character encodings.",null,null],[3,"EncodingDetectorError","","An error occurred while trying to detect the character encoding.",null,null],[5,"detect_encoding_name","","Return the name of the charset used in `data`, or `None` if the\ncharset is ASCII or if the encoding can't be detected.  This is\nthe value returned by the underlying `uchardet` library, with\nthe empty string mapped to `None`.",null,null],[6,"EncodingDetectorResult","","Either a return value, or an encoding detection error.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"encodingdetectorerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"encodingdetectorerror"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"encodingdetectorerror"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"encodingdetectorerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"EncodingDetectorError"]]};
searchIndex['uchardet_sys'] = {"items":[[0,"","uchardet_sys","Low-level, unsafe wrapper for the uchardet API.  Not intended to be\nused directly, unless you're writing your own wrapper.",null,null],[5,"uchardet_new","","",null,null],[5,"uchardet_delete","","",null,null],[5,"uchardet_handle_data","","",null,null],[5,"uchardet_data_end","","",null,null],[5,"uchardet_reset","","",null,null],[5,"uchardet_get_charset","","",null,null],[6,"uchardet_t","","",null,null]],"paths":[]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Trace` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"fmt","alloc::arc","",9,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",10,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",10,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",10,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",10,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",10,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Arc<T>`.",10,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",9,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",9,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",9,null],[11,"eq","","Equality for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",10,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",10,null],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",11,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",11,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",11,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",11,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",11,null],[11,"clone","","Makes a clone of the `Rc<T>`.",11,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",11,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",12,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",12,null],[11,"clone","","Makes a clone of the `Weak<T>`.",12,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",12,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"]]};
searchIndex['encoding_index_japanese'] = {"items":[[0,"","encoding_index_japanese","Japanese index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"jis0208","","JIS X 0208 with common extensions.",null,null],[5,"forward","encoding_index_japanese::jis0208","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"jis0212","encoding_index_japanese","JIS X 0212.",null,null],[5,"forward","encoding_index_japanese::jis0212","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding_index_singlebyte'] = {"items":[[0,"","encoding_index_singlebyte","Single-byte index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"ibm866","","IBM code page 866.",null,null],[5,"forward","encoding_index_singlebyte::ibm866","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_2","encoding_index_singlebyte","ISO 8859-2.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_3","encoding_index_singlebyte","ISO 8859-3.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_4","encoding_index_singlebyte","ISO 8859-4.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_5","encoding_index_singlebyte","ISO 8859-5.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_6","encoding_index_singlebyte","ISO 8859-6.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_7","encoding_index_singlebyte","ISO 8859-7.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_8","encoding_index_singlebyte","ISO 8859-8 (either visual or logical).",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_10","encoding_index_singlebyte","ISO 8859-10.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_13","encoding_index_singlebyte","ISO 8859-13.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_14","encoding_index_singlebyte","ISO 8859-14.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_15","encoding_index_singlebyte","ISO 8859-15.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_16","encoding_index_singlebyte","ISO 8859-16.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_r","encoding_index_singlebyte","KOI8-R.",null,null],[5,"forward","encoding_index_singlebyte::koi8_r","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_u","encoding_index_singlebyte","KOI8-U.",null,null],[5,"forward","encoding_index_singlebyte::koi8_u","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"macintosh","encoding_index_singlebyte","MacRoman.",null,null],[5,"forward","encoding_index_singlebyte::macintosh","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_874","encoding_index_singlebyte","Windows code page 874.",null,null],[5,"forward","encoding_index_singlebyte::windows_874","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1250","encoding_index_singlebyte","Windows code page 1250.",null,null],[5,"forward","encoding_index_singlebyte::windows_1250","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1251","encoding_index_singlebyte","Windows code page 1251.",null,null],[5,"forward","encoding_index_singlebyte::windows_1251","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1252","encoding_index_singlebyte","Windows code page 1252.",null,null],[5,"forward","encoding_index_singlebyte::windows_1252","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1253","encoding_index_singlebyte","Windows code page 1253.",null,null],[5,"forward","encoding_index_singlebyte::windows_1253","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1254","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1254","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1255","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1255","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1256","encoding_index_singlebyte","Windows code page 1256.",null,null],[5,"forward","encoding_index_singlebyte::windows_1256","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1257","encoding_index_singlebyte","Windows code page 1257.",null,null],[5,"forward","encoding_index_singlebyte::windows_1257","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1258","encoding_index_singlebyte","Windows code page 1258.",null,null],[5,"forward","encoding_index_singlebyte::windows_1258","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"x_mac_cyrillic","encoding_index_singlebyte","MacCyrillic.",null,null],[5,"forward","encoding_index_singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}]],"paths":[]};
searchIndex['strsim'] = {"items":[[0,"","strsim","This library implements string similarity metrics. Currently includes\nHamming, Levenshtein, Jaro, and Jaro-Winkler.",null,null],[4,"StrSimError","","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"strsimerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"StrSimError"]]};
searchIndex['pkg_config'] = {"items":[[0,"","pkg_config","A build dependency for Cargo libraries to find system artifacts through the\n`pkg-config` utility.",null,null],[3,"Config","","",null,null],[3,"Library","","",null,null],[12,"libs","","",0,null],[12,"link_paths","","",0,null],[12,"frameworks","","",0,null],[12,"framework_paths","","",0,null],[12,"include_paths","","",0,null],[5,"target_supported","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"find_library","","Simple shortcut for using all default options for finding a library.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"library"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of configuration options which are all initially set\nto \"blank\".",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"statik","","Indicate whether the `--static` flag should be passed.",1,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"config"}}],[11,"atleast_version","","Indicate that the library must be at least version `vers`.",1,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"config"}}],[11,"arg","","Add an argument to pass to pkg-config.",1,{"inputs":[{"name":"config"},{"name":"s"}],"output":{"name":"config"}}],[11,"find","","Run `pkg-config` to find the library `name`.",1,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Library"],[3,"Config"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['encoding_index_tests'] = {"items":[[0,"","encoding_index_tests","Macros and utilities for testing indices.",null,null],[14,"single_byte_tests!","","Makes a common test suite for single-byte indices.",null,null],[14,"multi_byte_tests!","","Makes a common test suite for multi-byte indices.",null,null],[14,"multi_byte_range_tests!","","Makes a common test suite for multi-byte range indices.",null,null]],"paths":[]};
initSearch(searchIndex);
